/*
 * generated by Xtext 2.34.0
 */
grammar InternalOCLX;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package at.jku.isse.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package at.jku.isse.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import at.jku.isse.services.OCLXGrammarAccess;

}

@parser::members {

 	private OCLXGrammarAccess grammarAccess;

    public InternalOCLXParser(TokenStream input, OCLXGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected OCLXGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getConstraintsConstraintParserRuleCall_0());
			}
			lv_constraints_0_0=ruleConstraint
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"constraints",
					lv_constraints_0_0,
					"at.jku.isse.OCLX.Constraint");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleConstraint
entryRuleConstraint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstraintRule()); }
	iv_ruleConstraint=ruleConstraint
	{ $current=$iv_ruleConstraint.current; }
	EOF;

// Rule Constraint
ruleConstraint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='rule'
		{
			newLeafNode(otherlv_0, grammarAccess.getConstraintAccess().getRuleKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getConstraintAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConstraintRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getConstraintAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='description:'
			{
				newLeafNode(otherlv_3, grammarAccess.getConstraintAccess().getDescriptionKeyword_3_0());
			}
			(
				(
					lv_description_4_0=RULE_DESCRIPTION
					{
						newLeafNode(lv_description_4_0, grammarAccess.getConstraintAccess().getDescriptionDESCRIPTIONTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConstraintRule());
						}
						setWithLastConsumed(
							$current,
							"description",
							lv_description_4_0,
							"at.jku.isse.OCLX.DESCRIPTION");
					}
				)
			)
		)?
		(
			otherlv_5='is'
			{
				newLeafNode(otherlv_5, grammarAccess.getConstraintAccess().getIsKeyword_4_0());
			}
			otherlv_6='overrulable:'
			{
				newLeafNode(otherlv_6, grammarAccess.getConstraintAccess().getOverrulableKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConstraintAccess().getOverrulableBooleanLiteralExpParserRuleCall_4_2_0());
					}
					lv_overrulable_7_0=ruleBooleanLiteralExp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstraintRule());
						}
						set(
							$current,
							"overrulable",
							lv_overrulable_7_0 != null,
							"at.jku.isse.OCLX.BooleanLiteralExp");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_8='context:'
		{
			newLeafNode(otherlv_8, grammarAccess.getConstraintAccess().getContextKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConstraintAccess().getContextContextParserRuleCall_6_0());
				}
				lv_context_9_0=ruleContext
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstraintRule());
					}
					set(
						$current,
						"context",
						lv_context_9_0,
						"at.jku.isse.OCLX.Context");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_10='expression:'
		{
			newLeafNode(otherlv_10, grammarAccess.getConstraintAccess().getExpressionKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConstraintAccess().getExpressionExpParserRuleCall_8_0());
				}
				lv_expression_11_0=ruleExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstraintRule());
					}
					set(
						$current,
						"expression",
						lv_expression_11_0,
						"at.jku.isse.OCLX.Exp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_12='}'
		{
			newLeafNode(otherlv_12, grammarAccess.getConstraintAccess().getRightCurlyBracketKeyword_9());
		}
	)
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleSimpleName
entryRuleSimpleName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSimpleNameRule()); }
	iv_ruleSimpleName=ruleSimpleName
	{ $current=$iv_ruleSimpleName.current.getText(); }
	EOF;

// Rule SimpleName
ruleSimpleName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_ID_0=RULE_ID
	{
		$current.merge(this_ID_0);
	}
	{
		newLeafNode(this_ID_0, grammarAccess.getSimpleNameAccess().getIDTerminalRuleCall());
	}
;

// Entry rule entryRuleFloat
entryRuleFloat returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFloatRule()); }
	iv_ruleFloat=ruleFloat
	{ $current=$iv_ruleFloat.current.getText(); }
	EOF;

// Rule Float
ruleFloat returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getFloatAccess().getINTTerminalRuleCall_0());
		}
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFloatAccess().getFullStopKeyword_1());
		}
		this_INT_2=RULE_INT
		{
			$current.merge(this_INT_2);
		}
		{
			newLeafNode(this_INT_2, grammarAccess.getFloatAccess().getINTTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRuleContext
entryRuleContext returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContextRule()); }
	iv_ruleContext=ruleContext
	{ $current=$iv_ruleContext.current; }
	EOF;

// Rule Context
ruleContext returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getContextAccess().getNameQualifiedNameParserRuleCall_0());
			}
			lv_name_0_0=ruleQualifiedName
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getContextRule());
				}
				set(
					$current,
					"name",
					lv_name_0_0,
					"at.jku.isse.OCLX.QualifiedName");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleExp
entryRuleExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpRule()); }
	iv_ruleExp=ruleExp
	{ $current=$iv_ruleExp.current; }
	EOF;

// Rule Exp
ruleExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpAccess().getPrefixedExpParserRuleCall_0());
		}
		this_PrefixedExp_0=rulePrefixedExp
		{
			$current = $this_PrefixedExp_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndAdd(
						grammarAccess.getExpAccess().getInfixExpExpressionsAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExpAccess().getOperatorsBinaryOperatorParserRuleCall_1_1_0());
					}
					lv_operators_2_0=ruleBinaryOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpRule());
						}
						add(
							$current,
							"operators",
							lv_operators_2_0,
							"at.jku.isse.OCLX.BinaryOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExpAccess().getExpressionsPrefixedExpParserRuleCall_1_2_0());
					}
					lv_expressions_3_0=rulePrefixedExp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpRule());
						}
						add(
							$current,
							"expressions",
							lv_expressions_3_0,
							"at.jku.isse.OCLX.PrefixedExp");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getExpAccess().getOperatorsBinaryOperatorParserRuleCall_1_3_0_0());
						}
						lv_operators_4_0=ruleBinaryOperator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpRule());
							}
							add(
								$current,
								"operators",
								lv_operators_4_0,
								"at.jku.isse.OCLX.BinaryOperator");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getExpAccess().getExpressionsPrefixedExpParserRuleCall_1_3_1_0());
						}
						lv_expressions_5_0=rulePrefixedExp
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpRule());
							}
							add(
								$current,
								"expressions",
								lv_expressions_5_0,
								"at.jku.isse.OCLX.PrefixedExp");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
	)
;

// Entry rule entryRulePrefixedExp
entryRulePrefixedExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrefixedExpRule()); }
	iv_rulePrefixedExp=rulePrefixedExp
	{ $current=$iv_rulePrefixedExp.current; }
	EOF;

// Rule PrefixedExp
rulePrefixedExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrefixedExpAccess().getPrefixExpAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPrefixedExpAccess().getOperatorUnaryOperatorParserRuleCall_0_1_0());
					}
					lv_operator_1_0=ruleUnaryOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrefixedExpRule());
						}
						set(
							$current,
							"operator",
							lv_operator_1_0,
							"at.jku.isse.OCLX.UnaryOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPrefixedExpAccess().getExpressionPrimaryExpParserRuleCall_0_2_0());
					}
					lv_expression_2_0=rulePrimaryExp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrefixedExpRule());
						}
						set(
							$current,
							"expression",
							lv_expression_2_0,
							"at.jku.isse.OCLX.PrimaryExp");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getPrefixedExpAccess().getPrimaryExpParserRuleCall_1());
		}
		this_PrimaryExp_3=rulePrimaryExp
		{
			$current = $this_PrimaryExp_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBinaryOperator
entryRuleBinaryOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBinaryOperatorRule()); }
	iv_ruleBinaryOperator=ruleBinaryOperator
	{ $current=$iv_ruleBinaryOperator.current; }
	EOF;

// Rule BinaryOperator
ruleBinaryOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getBinaryOperatorAccess().getInfixOperatorParserRuleCall());
	}
	this_InfixOperator_0=ruleInfixOperator
	{
		$current = $this_InfixOperator_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleInfixOperator
entryRuleInfixOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInfixOperatorRule()); }
	iv_ruleInfixOperator=ruleInfixOperator
	{ $current=$iv_ruleInfixOperator.current; }
	EOF;

// Rule InfixOperator
ruleInfixOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getInfixOperatorAccess().getBooleanOperatorParserRuleCall_0());
		}
		this_BooleanOperator_0=ruleBooleanOperator
		{
			$current = $this_BooleanOperator_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInfixOperatorAccess().getMathOperatorParserRuleCall_1());
		}
		this_MathOperator_1=ruleMathOperator
		{
			$current = $this_MathOperator_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBooleanOperator
entryRuleBooleanOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanOperatorRule()); }
	iv_ruleBooleanOperator=ruleBooleanOperator
	{ $current=$iv_ruleBooleanOperator.current; }
	EOF;

// Rule BooleanOperator
ruleBooleanOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_op_0_1='>'
				{
					newLeafNode(lv_op_0_1, grammarAccess.getBooleanOperatorAccess().getOpGreaterThanSignKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanOperatorRule());
					}
					setWithLastConsumed($current, "op", lv_op_0_1, null);
				}
				    |
				lv_op_0_2='<'
				{
					newLeafNode(lv_op_0_2, grammarAccess.getBooleanOperatorAccess().getOpLessThanSignKeyword_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanOperatorRule());
					}
					setWithLastConsumed($current, "op", lv_op_0_2, null);
				}
				    |
				lv_op_0_3='>='
				{
					newLeafNode(lv_op_0_3, grammarAccess.getBooleanOperatorAccess().getOpGreaterThanSignEqualsSignKeyword_0_2());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanOperatorRule());
					}
					setWithLastConsumed($current, "op", lv_op_0_3, null);
				}
				    |
				lv_op_0_4='<='
				{
					newLeafNode(lv_op_0_4, grammarAccess.getBooleanOperatorAccess().getOpLessThanSignEqualsSignKeyword_0_3());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanOperatorRule());
					}
					setWithLastConsumed($current, "op", lv_op_0_4, null);
				}
				    |
				lv_op_0_5='='
				{
					newLeafNode(lv_op_0_5, grammarAccess.getBooleanOperatorAccess().getOpEqualsSignKeyword_0_4());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanOperatorRule());
					}
					setWithLastConsumed($current, "op", lv_op_0_5, null);
				}
				    |
				lv_op_0_6='!='
				{
					newLeafNode(lv_op_0_6, grammarAccess.getBooleanOperatorAccess().getOpExclamationMarkEqualsSignKeyword_0_5());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanOperatorRule());
					}
					setWithLastConsumed($current, "op", lv_op_0_6, null);
				}
				    |
				lv_op_0_7='and'
				{
					newLeafNode(lv_op_0_7, grammarAccess.getBooleanOperatorAccess().getOpAndKeyword_0_6());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanOperatorRule());
					}
					setWithLastConsumed($current, "op", lv_op_0_7, null);
				}
				    |
				lv_op_0_8='or'
				{
					newLeafNode(lv_op_0_8, grammarAccess.getBooleanOperatorAccess().getOpOrKeyword_0_7());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanOperatorRule());
					}
					setWithLastConsumed($current, "op", lv_op_0_8, null);
				}
				    |
				lv_op_0_9='xor'
				{
					newLeafNode(lv_op_0_9, grammarAccess.getBooleanOperatorAccess().getOpXorKeyword_0_8());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanOperatorRule());
					}
					setWithLastConsumed($current, "op", lv_op_0_9, null);
				}
				    |
				lv_op_0_10='implies'
				{
					newLeafNode(lv_op_0_10, grammarAccess.getBooleanOperatorAccess().getOpImpliesKeyword_0_9());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanOperatorRule());
					}
					setWithLastConsumed($current, "op", lv_op_0_10, null);
				}
			)
		)
	)
;

// Entry rule entryRuleMathOperator
entryRuleMathOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMathOperatorRule()); }
	iv_ruleMathOperator=ruleMathOperator
	{ $current=$iv_ruleMathOperator.current; }
	EOF;

// Rule MathOperator
ruleMathOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_op_0_1='*'
				{
					newLeafNode(lv_op_0_1, grammarAccess.getMathOperatorAccess().getOpAsteriskKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMathOperatorRule());
					}
					setWithLastConsumed($current, "op", lv_op_0_1, null);
				}
				    |
				lv_op_0_2='/'
				{
					newLeafNode(lv_op_0_2, grammarAccess.getMathOperatorAccess().getOpSolidusKeyword_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMathOperatorRule());
					}
					setWithLastConsumed($current, "op", lv_op_0_2, null);
				}
				    |
				lv_op_0_3='+'
				{
					newLeafNode(lv_op_0_3, grammarAccess.getMathOperatorAccess().getOpPlusSignKeyword_0_2());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMathOperatorRule());
					}
					setWithLastConsumed($current, "op", lv_op_0_3, null);
				}
				    |
				lv_op_0_4='-'
				{
					newLeafNode(lv_op_0_4, grammarAccess.getMathOperatorAccess().getOpHyphenMinusKeyword_0_3());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMathOperatorRule());
					}
					setWithLastConsumed($current, "op", lv_op_0_4, null);
				}
			)
		)
	)
;

// Entry rule entryRuleNavigationOperator
entryRuleNavigationOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNavigationOperatorRule()); }
	iv_ruleNavigationOperator=ruleNavigationOperator
	{ $current=$iv_ruleNavigationOperator.current; }
	EOF;

// Rule NavigationOperator
ruleNavigationOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_1='.'
				{
					newLeafNode(lv_name_0_1, grammarAccess.getNavigationOperatorAccess().getNameFullStopKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNavigationOperatorRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_1, null);
				}
				    |
				lv_name_0_2='->'
				{
					newLeafNode(lv_name_0_2, grammarAccess.getNavigationOperatorAccess().getNameHyphenMinusGreaterThanSignKeyword_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNavigationOperatorRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_2, null);
				}
			)
		)
	)
;

// Entry rule entryRuleUnaryOperator
entryRuleUnaryOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryOperatorRule()); }
	iv_ruleUnaryOperator=ruleUnaryOperator
	{ $current=$iv_ruleUnaryOperator.current; }
	EOF;

// Rule UnaryOperator
ruleUnaryOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_1='-'
				{
					newLeafNode(lv_name_0_1, grammarAccess.getUnaryOperatorAccess().getNameHyphenMinusKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUnaryOperatorRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_1, null);
				}
				    |
				lv_name_0_2='not'
				{
					newLeafNode(lv_name_0_2, grammarAccess.getUnaryOperatorAccess().getNameNotKeyword_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUnaryOperatorRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_2, null);
				}
			)
		)
	)
;

// Entry rule entryRulePrimaryExp
entryRulePrimaryExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExpRule()); }
	iv_rulePrimaryExp=rulePrimaryExp
	{ $current=$iv_rulePrimaryExp.current; }
	EOF;

// Rule PrimaryExp
rulePrimaryExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimaryExpAccess().getNestedExpParserRuleCall_0());
		}
		this_NestedExp_0=ruleNestedExp
		{
			$current = $this_NestedExp_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			{
				newCompositeNode(grammarAccess.getPrimaryExpAccess().getVarOrSelfExpParserRuleCall_1_0());
			}
			this_VarOrSelfExp_1=ruleVarOrSelfExp
			{
				$current = $this_VarOrSelfExp_1.current;
				afterParserOrEnumRuleCall();
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getPrimaryExpAccess().getNavNavigationOperatorParserRuleCall_1_1_0_0());
						}
						lv_nav_2_0=ruleNavigationOperator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPrimaryExpRule());
							}
							add(
								$current,
								"nav",
								lv_nav_2_0,
								"at.jku.isse.OCLX.NavigationOperator");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getPrimaryExpAccess().getMethodsMethodExpParserRuleCall_1_1_1_0());
						}
						lv_methods_3_0=ruleMethodExp
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPrimaryExpRule());
							}
							add(
								$current,
								"methods",
								lv_methods_3_0,
								"at.jku.isse.OCLX.MethodExp");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExpAccess().getPrimitiveLiteralExpParserRuleCall_2());
		}
		this_PrimitiveLiteralExp_4=rulePrimitiveLiteralExp
		{
			$current = $this_PrimitiveLiteralExp_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExpAccess().getTemporalExpParserRuleCall_3());
		}
		this_TemporalExp_5=ruleTemporalExp
		{
			$current = $this_TemporalExp_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNestedExp
entryRuleNestedExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNestedExpRule()); }
	iv_ruleNestedExp=ruleNestedExp
	{ $current=$iv_ruleNestedExp.current; }
	EOF;

// Rule NestedExp
ruleNestedExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getNestedExpAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNestedExpAccess().getSourceExpParserRuleCall_1_0());
				}
				lv_source_1_0=ruleExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNestedExpRule());
					}
					set(
						$current,
						"source",
						lv_source_1_0,
						"at.jku.isse.OCLX.Exp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getNestedExpAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleVarOrSelfExp
entryRuleVarOrSelfExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarOrSelfExpRule()); }
	iv_ruleVarOrSelfExp=ruleVarOrSelfExp
	{ $current=$iv_ruleVarOrSelfExp.current; }
	EOF;

// Rule VarOrSelfExp
ruleVarOrSelfExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getVarOrSelfExpAccess().getSelfExpParserRuleCall_0());
		}
		this_SelfExp_0=ruleSelfExp
		{
			$current = $this_SelfExp_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getVarOrSelfExpAccess().getVarReferenceParserRuleCall_1());
		}
		this_VarReference_1=ruleVarReference
		{
			$current = $this_VarReference_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSelfExp
entryRuleSelfExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelfExpRule()); }
	iv_ruleSelfExp=ruleSelfExp
	{ $current=$iv_ruleSelfExp.current; }
	EOF;

// Rule SelfExp
ruleSelfExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSelfExpAccess().getSelfExpAction_0(),
					$current);
			}
		)
		(
			(
				lv_name_1_0='self'
				{
					newLeafNode(lv_name_1_0, grammarAccess.getSelfExpAccess().getNameSelfKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSelfExpRule());
					}
					setWithLastConsumed($current, "name", lv_name_1_0, "self");
				}
			)
		)
	)
;

// Entry rule entryRuleVarDeclaration
entryRuleVarDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarDeclarationRule()); }
	iv_ruleVarDeclaration=ruleVarDeclaration
	{ $current=$iv_ruleVarDeclaration.current; }
	EOF;

// Rule VarDeclaration
ruleVarDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getVarDeclarationAccess().getNameSimpleNameParserRuleCall_0());
			}
			lv_name_0_0=ruleSimpleName
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getVarDeclarationRule());
				}
				set(
					$current,
					"name",
					lv_name_0_0,
					"at.jku.isse.OCLX.SimpleName");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleVarReference
entryRuleVarReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarReferenceRule()); }
	iv_ruleVarReference=ruleVarReference
	{ $current=$iv_ruleVarReference.current; }
	EOF;

// Rule VarReference
ruleVarReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getVarReferenceRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getVarReferenceAccess().getRefVarDeclarationCrossReference_0());
			}
		)
	)
;

// Entry rule entryRulePrimitiveLiteralExp
entryRulePrimitiveLiteralExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimitiveLiteralExpRule()); }
	iv_rulePrimitiveLiteralExp=rulePrimitiveLiteralExp
	{ $current=$iv_rulePrimitiveLiteralExp.current; }
	EOF;

// Rule PrimitiveLiteralExp
rulePrimitiveLiteralExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimitiveLiteralExpAccess().getIntLiteralExpParserRuleCall_0());
		}
		this_IntLiteralExp_0=ruleIntLiteralExp
		{
			$current = $this_IntLiteralExp_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimitiveLiteralExpAccess().getStringLiteralExpParserRuleCall_1());
		}
		this_StringLiteralExp_1=ruleStringLiteralExp
		{
			$current = $this_StringLiteralExp_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimitiveLiteralExpAccess().getBooleanLiteralExpParserRuleCall_2());
		}
		this_BooleanLiteralExp_2=ruleBooleanLiteralExp
		{
			$current = $this_BooleanLiteralExp_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimitiveLiteralExpAccess().getFloatLiteralExpParserRuleCall_3());
		}
		this_FloatLiteralExp_3=ruleFloatLiteralExp
		{
			$current = $this_FloatLiteralExp_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIntLiteralExp
entryRuleIntLiteralExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntLiteralExpRule()); }
	iv_ruleIntLiteralExp=ruleIntLiteralExp
	{ $current=$iv_ruleIntLiteralExp.current; }
	EOF;

// Rule IntLiteralExp
ruleIntLiteralExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_INT
			{
				newLeafNode(lv_value_0_0, grammarAccess.getIntLiteralExpAccess().getValueINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getIntLiteralExpRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

// Entry rule entryRuleStringLiteralExp
entryRuleStringLiteralExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringLiteralExpRule()); }
	iv_ruleStringLiteralExp=ruleStringLiteralExp
	{ $current=$iv_ruleStringLiteralExp.current; }
	EOF;

// Rule StringLiteralExp
ruleStringLiteralExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_STRING
			{
				newLeafNode(lv_value_0_0, grammarAccess.getStringLiteralExpAccess().getValueSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getStringLiteralExpRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRuleBooleanLiteralExp
entryRuleBooleanLiteralExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanLiteralExpRule()); }
	iv_ruleBooleanLiteralExp=ruleBooleanLiteralExp
	{ $current=$iv_ruleBooleanLiteralExp.current; }
	EOF;

// Rule BooleanLiteralExp
ruleBooleanLiteralExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_value_0_0='true'
				{
					newLeafNode(lv_value_0_0, grammarAccess.getBooleanLiteralExpAccess().getValueTrueKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanLiteralExpRule());
					}
					setWithLastConsumed($current, "value", lv_value_0_0, "true");
				}
			)
		)
		    |
		(
			(
				lv_value_1_0='false'
				{
					newLeafNode(lv_value_1_0, grammarAccess.getBooleanLiteralExpAccess().getValueFalseKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanLiteralExpRule());
					}
					setWithLastConsumed($current, "value", lv_value_1_0, "false");
				}
			)
		)
	)
;

// Entry rule entryRuleFloatLiteralExp
entryRuleFloatLiteralExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFloatLiteralExpRule()); }
	iv_ruleFloatLiteralExp=ruleFloatLiteralExp
	{ $current=$iv_ruleFloatLiteralExp.current; }
	EOF;

// Rule FloatLiteralExp
ruleFloatLiteralExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getFloatLiteralExpAccess().getValueFloatParserRuleCall_0());
			}
			lv_value_0_0=ruleFloat
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getFloatLiteralExpRule());
				}
				set(
					$current,
					"value",
					lv_value_0_0,
					"at.jku.isse.OCLX.Float");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleMethodExp
entryRuleMethodExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMethodExpRule()); }
	iv_ruleMethodExp=ruleMethodExp
	{ $current=$iv_ruleMethodExp.current; }
	EOF;

// Rule MethodExp
ruleMethodExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMethodExpAccess().getPropertyAccessParserRuleCall_0());
		}
		this_PropertyAccess_0=rulePropertyAccess
		{
			$current = $this_PropertyAccess_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMethodExpAccess().getMethodCallParserRuleCall_1());
		}
		this_MethodCall_1=ruleMethodCall
		{
			$current = $this_MethodCall_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMethodExpAccess().getCollectionIteratorParserRuleCall_2());
		}
		this_CollectionIterator_2=ruleCollectionIterator
		{
			$current = $this_CollectionIterator_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMethodExpAccess().getTypeCallParserRuleCall_3());
		}
		this_TypeCall_3=ruleTypeCall
		{
			$current = $this_TypeCall_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCollectionIterator
entryRuleCollectionIterator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCollectionIteratorRule()); }
	iv_ruleCollectionIterator=ruleCollectionIterator
	{ $current=$iv_ruleCollectionIterator.current; }
	EOF;

// Rule CollectionIterator
ruleCollectionIterator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCollectionIteratorAccess().getNameIteratorNameParserRuleCall_0_0());
				}
				lv_name_0_0=ruleIteratorName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCollectionIteratorRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"at.jku.isse.OCLX.IteratorName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getCollectionIteratorAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCollectionIteratorAccess().getItervarIteratorVarDeclarationParserRuleCall_2_0());
				}
				lv_itervar_2_0=ruleIteratorVarDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCollectionIteratorRule());
					}
					set(
						$current,
						"itervar",
						lv_itervar_2_0,
						"at.jku.isse.OCLX.IteratorVarDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='|'
		{
			newLeafNode(otherlv_3, grammarAccess.getCollectionIteratorAccess().getVerticalLineKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCollectionIteratorAccess().getBodyExpParserRuleCall_4_0());
				}
				lv_body_4_0=ruleExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCollectionIteratorRule());
					}
					set(
						$current,
						"body",
						lv_body_4_0,
						"at.jku.isse.OCLX.Exp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getCollectionIteratorAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleIteratorName
entryRuleIteratorName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIteratorNameRule()); }
	iv_ruleIteratorName=ruleIteratorName
	{ $current=$iv_ruleIteratorName.current; }
	EOF;

// Rule IteratorName
ruleIteratorName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_1='forAll'
				{
					newLeafNode(lv_name_0_1, grammarAccess.getIteratorNameAccess().getNameForAllKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIteratorNameRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_1, null);
				}
				    |
				lv_name_0_2='exists'
				{
					newLeafNode(lv_name_0_2, grammarAccess.getIteratorNameAccess().getNameExistsKeyword_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIteratorNameRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_2, null);
				}
				    |
				lv_name_0_3='collect'
				{
					newLeafNode(lv_name_0_3, grammarAccess.getIteratorNameAccess().getNameCollectKeyword_0_2());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIteratorNameRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_3, null);
				}
				    |
				lv_name_0_4='reject'
				{
					newLeafNode(lv_name_0_4, grammarAccess.getIteratorNameAccess().getNameRejectKeyword_0_3());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIteratorNameRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_4, null);
				}
				    |
				lv_name_0_5='select'
				{
					newLeafNode(lv_name_0_5, grammarAccess.getIteratorNameAccess().getNameSelectKeyword_0_4());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIteratorNameRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_5, null);
				}
			)
		)
	)
;

// Entry rule entryRuleIteratorVarDeclaration
entryRuleIteratorVarDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIteratorVarDeclarationRule()); }
	iv_ruleIteratorVarDeclaration=ruleIteratorVarDeclaration
	{ $current=$iv_ruleIteratorVarDeclaration.current; }
	EOF;

// Rule IteratorVarDeclaration
ruleIteratorVarDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getIteratorVarDeclarationAccess().getNameVarDeclarationParserRuleCall_0_0());
				}
				lv_name_0_0=ruleVarDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIteratorVarDeclarationRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"at.jku.isse.OCLX.VarDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getIteratorVarDeclarationAccess().getNameVarDeclarationParserRuleCall_1_0_0());
					}
					lv_name_1_0=ruleVarDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIteratorVarDeclarationRule());
						}
						set(
							$current,
							"name",
							lv_name_1_0,
							"at.jku.isse.OCLX.VarDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_2=':'
			{
				newLeafNode(otherlv_2, grammarAccess.getIteratorVarDeclarationAccess().getColonKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIteratorVarDeclarationAccess().getTypeTypeExpParserRuleCall_1_2_0());
					}
					lv_type_3_0=ruleTypeExp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIteratorVarDeclarationRule());
						}
						set(
							$current,
							"type",
							lv_type_3_0,
							"at.jku.isse.OCLX.TypeExp");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRulePropertyAccess
entryRulePropertyAccess returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPropertyAccessRule()); }
	iv_rulePropertyAccess=rulePropertyAccess
	{ $current=$iv_rulePropertyAccess.current; }
	EOF;

// Rule PropertyAccess
rulePropertyAccess returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getPropertyAccessAccess().getNameSimpleNameParserRuleCall_0());
			}
			lv_name_0_0=ruleSimpleName
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getPropertyAccessRule());
				}
				set(
					$current,
					"name",
					lv_name_0_0,
					"at.jku.isse.OCLX.SimpleName");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleMethodCall
entryRuleMethodCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMethodCallRule()); }
	iv_ruleMethodCall=ruleMethodCall
	{ $current=$iv_ruleMethodCall.current; }
	EOF;

// Rule MethodCall
ruleMethodCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getMethodCallAccess().getNameSimpleNameParserRuleCall_0_0_0());
					}
					lv_name_0_0=ruleSimpleName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMethodCallRule());
						}
						set(
							$current,
							"name",
							lv_name_0_0,
							"at.jku.isse.OCLX.SimpleName");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_1='()'
			{
				newLeafNode(otherlv_1, grammarAccess.getMethodCallAccess().getLeftParenthesisRightParenthesisKeyword_0_1());
			}
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getMethodCallAccess().getNameSimpleNameParserRuleCall_1_0_0());
					}
					lv_name_2_0=ruleSimpleName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMethodCallRule());
						}
						set(
							$current,
							"name",
							lv_name_2_0,
							"at.jku.isse.OCLX.SimpleName");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3='('
			{
				newLeafNode(otherlv_3, grammarAccess.getMethodCallAccess().getLeftParenthesisKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMethodCallAccess().getArgsArgumentsExpParserRuleCall_1_2_0());
					}
					lv_args_4_0=ruleArgumentsExp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMethodCallRule());
						}
						set(
							$current,
							"args",
							lv_args_4_0,
							"at.jku.isse.OCLX.ArgumentsExp");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getMethodCallAccess().getRightParenthesisKeyword_1_3());
			}
		)
	)
;

// Entry rule entryRuleTypeCall
entryRuleTypeCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeCallRule()); }
	iv_ruleTypeCall=ruleTypeCall
	{ $current=$iv_ruleTypeCall.current; }
	EOF;

// Rule TypeCall
ruleTypeCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_name_0_1='asType'
					{
						newLeafNode(lv_name_0_1, grammarAccess.getTypeCallAccess().getNameAsTypeKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeCallRule());
						}
						setWithLastConsumed($current, "name", lv_name_0_1, null);
					}
					    |
					lv_name_0_2='isTypeOf'
					{
						newLeafNode(lv_name_0_2, grammarAccess.getTypeCallAccess().getNameIsTypeOfKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeCallRule());
						}
						setWithLastConsumed($current, "name", lv_name_0_2, null);
					}
					    |
					lv_name_0_3='isKindOf'
					{
						newLeafNode(lv_name_0_3, grammarAccess.getTypeCallAccess().getNameIsKindOfKeyword_0_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeCallRule());
						}
						setWithLastConsumed($current, "name", lv_name_0_3, null);
					}
				)
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getTypeCallAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeCallAccess().getTypeTypeExpParserRuleCall_2_0());
				}
				lv_type_2_0=ruleTypeExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeCallRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"at.jku.isse.OCLX.TypeExp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getTypeCallAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleTypeExp
entryRuleTypeExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeExpRule()); }
	iv_ruleTypeExp=ruleTypeExp
	{ $current=$iv_ruleTypeExp.current; }
	EOF;

// Rule TypeExp
ruleTypeExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTypeExpAccess().getTypeExpAction_0(),
					$current);
			}
		)
		(
			(
				lv_name_1_0=RULE_URI
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTypeExpAccess().getNameURITerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeExpRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"at.jku.isse.OCLX.URI");
				}
			)
		)
	)
;

// Entry rule entryRuleTemporalExp
entryRuleTemporalExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTemporalExpRule()); }
	iv_ruleTemporalExp=ruleTemporalExp
	{ $current=$iv_ruleTemporalExp.current; }
	EOF;

// Rule TemporalExp
ruleTemporalExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTemporalExpAccess().getUnaryTemporalExpParserRuleCall_0());
		}
		this_UnaryTemporalExp_0=ruleUnaryTemporalExp
		{
			$current = $this_UnaryTemporalExp_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTemporalExpAccess().getTriggeredTemporalExpParserRuleCall_1());
		}
		this_TriggeredTemporalExp_1=ruleTriggeredTemporalExp
		{
			$current = $this_TriggeredTemporalExp_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleUnaryTemporalExp
entryRuleUnaryTemporalExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryTemporalExpRule()); }
	iv_ruleUnaryTemporalExp=ruleUnaryTemporalExp
	{ $current=$iv_ruleUnaryTemporalExp.current; }
	EOF;

// Rule UnaryTemporalExp
ruleUnaryTemporalExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getUnaryTemporalExpAccess().getNameUnaryTemporalOpParserRuleCall_0_0());
				}
				lv_name_0_0=ruleUnaryTemporalOp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnaryTemporalExpRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"at.jku.isse.OCLX.UnaryTemporalOp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getUnaryTemporalExpAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUnaryTemporalExpAccess().getExpExpParserRuleCall_2_0());
				}
				lv_exp_2_0=ruleExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnaryTemporalExpRule());
					}
					set(
						$current,
						"exp",
						lv_exp_2_0,
						"at.jku.isse.OCLX.Exp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getUnaryTemporalExpAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleUnaryTemporalOp
entryRuleUnaryTemporalOp returns [String current=null]:
	{ newCompositeNode(grammarAccess.getUnaryTemporalOpRule()); }
	iv_ruleUnaryTemporalOp=ruleUnaryTemporalOp
	{ $current=$iv_ruleUnaryTemporalOp.current.getText(); }
	EOF;

// Rule UnaryTemporalOp
ruleUnaryTemporalOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='next'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnaryTemporalOpAccess().getNextKeyword_0());
		}
		    |
		kw='always'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnaryTemporalOpAccess().getAlwaysKeyword_1());
		}
		    |
		kw='eventually'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnaryTemporalOpAccess().getEventuallyKeyword_2());
		}
	)
;

// Entry rule entryRuleTriggeredTemporalExp
entryRuleTriggeredTemporalExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTriggeredTemporalExpRule()); }
	iv_ruleTriggeredTemporalExp=ruleTriggeredTemporalExp
	{ $current=$iv_ruleTriggeredTemporalExp.current; }
	EOF;

// Rule TriggeredTemporalExp
ruleTriggeredTemporalExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTriggeredTemporalExpAccess().getTemporalAsLongAsParserRuleCall_0());
		}
		this_TemporalAsLongAs_0=ruleTemporalAsLongAs
		{
			$current = $this_TemporalAsLongAs_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTriggeredTemporalExpAccess().getTemporalUntilParserRuleCall_1());
		}
		this_TemporalUntil_1=ruleTemporalUntil
		{
			$current = $this_TemporalUntil_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTriggeredTemporalExpAccess().getTemporalEverytimeParserRuleCall_2());
		}
		this_TemporalEverytime_2=ruleTemporalEverytime
		{
			$current = $this_TemporalEverytime_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTriggeredTemporalExpAccess().getTemporalAtLeastOnceParserRuleCall_3());
		}
		this_TemporalAtLeastOnce_3=ruleTemporalAtLeastOnce
		{
			$current = $this_TemporalAtLeastOnce_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTriggeredTemporalExpAccess().getLegacyUntilParserRuleCall_4());
		}
		this_LegacyUntil_4=ruleLegacyUntil
		{
			$current = $this_LegacyUntil_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTriggeredTemporalExpAccess().getLegacyAsSoonAsParserRuleCall_5());
		}
		this_LegacyAsSoonAs_5=ruleLegacyAsSoonAs
		{
			$current = $this_LegacyAsSoonAs_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTriggeredTemporalExpAccess().getLegacyEverytimeParserRuleCall_6());
		}
		this_LegacyEverytime_6=ruleLegacyEverytime
		{
			$current = $this_LegacyEverytime_6.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTemporalAsLongAs
entryRuleTemporalAsLongAs returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTemporalAsLongAsRule()); }
	iv_ruleTemporalAsLongAs=ruleTemporalAsLongAs
	{ $current=$iv_ruleTemporalAsLongAs.current; }
	EOF;

// Rule TemporalAsLongAs
ruleTemporalAsLongAs returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='asLongAs'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getTemporalAsLongAsAccess().getNameAsLongAsKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTemporalAsLongAsRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "asLongAs");
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getTemporalAsLongAsAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTemporalAsLongAsAccess().getBExpParserRuleCall_2_0());
				}
				lv_b_2_0=ruleExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTemporalAsLongAsRule());
					}
					set(
						$current,
						"b",
						lv_b_2_0,
						"at.jku.isse.OCLX.Exp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='ensureThat'
		{
			newLeafNode(otherlv_3, grammarAccess.getTemporalAsLongAsAccess().getEnsureThatKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTemporalAsLongAsAccess().getAExpParserRuleCall_4_0());
				}
				lv_a_4_0=ruleExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTemporalAsLongAsRule());
					}
					set(
						$current,
						"a",
						lv_a_4_0,
						"at.jku.isse.OCLX.Exp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getTemporalAsLongAsAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleTemporalUntil
entryRuleTemporalUntil returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTemporalUntilRule()); }
	iv_ruleTemporalUntil=ruleTemporalUntil
	{ $current=$iv_ruleTemporalUntil.current; }
	EOF;

// Rule TemporalUntil
ruleTemporalUntil returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='ensureThat'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getTemporalUntilAccess().getNameEnsureThatKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTemporalUntilRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "ensureThat");
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getTemporalUntilAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTemporalUntilAccess().getAExpParserRuleCall_2_0());
				}
				lv_a_2_0=ruleExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTemporalUntilRule());
					}
					set(
						$current,
						"a",
						lv_a_2_0,
						"at.jku.isse.OCLX.Exp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='asLongAs'
		{
			newLeafNode(otherlv_3, grammarAccess.getTemporalUntilAccess().getAsLongAsKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTemporalUntilAccess().getBExpParserRuleCall_4_0());
				}
				lv_b_4_0=ruleExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTemporalUntilRule());
					}
					set(
						$current,
						"b",
						lv_b_4_0,
						"at.jku.isse.OCLX.Exp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getTemporalUntilAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleTemporalEverytime
entryRuleTemporalEverytime returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTemporalEverytimeRule()); }
	iv_ruleTemporalEverytime=ruleTemporalEverytime
	{ $current=$iv_ruleTemporalEverytime.current; }
	EOF;

// Rule TemporalEverytime
ruleTemporalEverytime returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='everyTime'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getTemporalEverytimeAccess().getNameEveryTimeKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTemporalEverytimeRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "everyTime");
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getTemporalEverytimeAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTemporalEverytimeAccess().getAExpParserRuleCall_2_0());
				}
				lv_a_2_0=ruleExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTemporalEverytimeRule());
					}
					set(
						$current,
						"a",
						lv_a_2_0,
						"at.jku.isse.OCLX.Exp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='then'
		{
			newLeafNode(otherlv_3, grammarAccess.getTemporalEverytimeAccess().getThenKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTemporalEverytimeAccess().getBExpParserRuleCall_4_0());
				}
				lv_b_4_0=ruleExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTemporalEverytimeRule());
					}
					set(
						$current,
						"b",
						lv_b_4_0,
						"at.jku.isse.OCLX.Exp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getTemporalEverytimeAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleTemporalAtLeastOnce
entryRuleTemporalAtLeastOnce returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTemporalAtLeastOnceRule()); }
	iv_ruleTemporalAtLeastOnce=ruleTemporalAtLeastOnce
	{ $current=$iv_ruleTemporalAtLeastOnce.current; }
	EOF;

// Rule TemporalAtLeastOnce
ruleTemporalAtLeastOnce returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='whenOnce'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getTemporalAtLeastOnceAccess().getNameWhenOnceKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTemporalAtLeastOnceRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "whenOnce");
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getTemporalAtLeastOnceAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTemporalAtLeastOnceAccess().getAExpParserRuleCall_2_0());
				}
				lv_a_2_0=ruleExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTemporalAtLeastOnceRule());
					}
					set(
						$current,
						"a",
						lv_a_2_0,
						"at.jku.isse.OCLX.Exp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='thenAtLeastOnce'
		{
			newLeafNode(otherlv_3, grammarAccess.getTemporalAtLeastOnceAccess().getThenAtLeastOnceKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTemporalAtLeastOnceAccess().getBExpParserRuleCall_4_0());
				}
				lv_b_4_0=ruleExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTemporalAtLeastOnceRule());
					}
					set(
						$current,
						"b",
						lv_b_4_0,
						"at.jku.isse.OCLX.Exp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getTemporalAtLeastOnceAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleLegacyUntil
entryRuleLegacyUntil returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLegacyUntilRule()); }
	iv_ruleLegacyUntil=ruleLegacyUntil
	{ $current=$iv_ruleLegacyUntil.current; }
	EOF;

// Rule LegacyUntil
ruleLegacyUntil returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='until'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getLegacyUntilAccess().getNameUntilKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLegacyUntilRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "until");
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getLegacyUntilAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLegacyUntilAccess().getAExpParserRuleCall_2_0());
				}
				lv_a_2_0=ruleExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLegacyUntilRule());
					}
					set(
						$current,
						"a",
						lv_a_2_0,
						"at.jku.isse.OCLX.Exp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getLegacyUntilAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLegacyUntilAccess().getBExpParserRuleCall_4_0());
				}
				lv_b_4_0=ruleExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLegacyUntilRule());
					}
					set(
						$current,
						"b",
						lv_b_4_0,
						"at.jku.isse.OCLX.Exp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getLegacyUntilAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleLegacyAsSoonAs
entryRuleLegacyAsSoonAs returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLegacyAsSoonAsRule()); }
	iv_ruleLegacyAsSoonAs=ruleLegacyAsSoonAs
	{ $current=$iv_ruleLegacyAsSoonAs.current; }
	EOF;

// Rule LegacyAsSoonAs
ruleLegacyAsSoonAs returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='asSoonAs'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getLegacyAsSoonAsAccess().getNameAsSoonAsKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLegacyAsSoonAsRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "asSoonAs");
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getLegacyAsSoonAsAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLegacyAsSoonAsAccess().getAExpParserRuleCall_2_0());
				}
				lv_a_2_0=ruleExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLegacyAsSoonAsRule());
					}
					set(
						$current,
						"a",
						lv_a_2_0,
						"at.jku.isse.OCLX.Exp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getLegacyAsSoonAsAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLegacyAsSoonAsAccess().getBExpParserRuleCall_4_0());
				}
				lv_b_4_0=ruleExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLegacyAsSoonAsRule());
					}
					set(
						$current,
						"b",
						lv_b_4_0,
						"at.jku.isse.OCLX.Exp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getLegacyAsSoonAsAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleLegacyEverytime
entryRuleLegacyEverytime returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLegacyEverytimeRule()); }
	iv_ruleLegacyEverytime=ruleLegacyEverytime
	{ $current=$iv_ruleLegacyEverytime.current; }
	EOF;

// Rule LegacyEverytime
ruleLegacyEverytime returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='everytime'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getLegacyEverytimeAccess().getNameEverytimeKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLegacyEverytimeRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "everytime");
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getLegacyEverytimeAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLegacyEverytimeAccess().getAExpParserRuleCall_2_0());
				}
				lv_a_2_0=ruleExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLegacyEverytimeRule());
					}
					set(
						$current,
						"a",
						lv_a_2_0,
						"at.jku.isse.OCLX.Exp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getLegacyEverytimeAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLegacyEverytimeAccess().getBExpParserRuleCall_4_0());
				}
				lv_b_4_0=ruleExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLegacyEverytimeRule());
					}
					set(
						$current,
						"b",
						lv_b_4_0,
						"at.jku.isse.OCLX.Exp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getLegacyEverytimeAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleArgumentsExp
entryRuleArgumentsExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArgumentsExpRule()); }
	iv_ruleArgumentsExp=ruleArgumentsExp
	{ $current=$iv_ruleArgumentsExp.current; }
	EOF;

// Rule ArgumentsExp
ruleArgumentsExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getArgumentsExpAccess().getOperatorsExpParserRuleCall_0_0());
				}
				lv_operators_0_0=ruleExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArgumentsExpRule());
					}
					add(
						$current,
						"operators",
						lv_operators_0_0,
						"at.jku.isse.OCLX.Exp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getArgumentsExpAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getArgumentsExpAccess().getOperatorsExpParserRuleCall_1_1_0());
					}
					lv_operators_2_0=ruleExp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArgumentsExpRule());
						}
						add(
							$current,
							"operators",
							lv_operators_2_0,
							"at.jku.isse.OCLX.Exp");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

RULE_DESCRIPTION : '"' ( options {greedy=false;} : . )*'"';

RULE_URI : '<' ( options {greedy=false;} : . )*'>';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
