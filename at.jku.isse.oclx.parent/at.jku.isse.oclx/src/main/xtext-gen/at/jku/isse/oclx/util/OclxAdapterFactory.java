/**
 * generated by Xtext 2.34.0
 */
package at.jku.isse.oclx.util;

import at.jku.isse.oclx.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see at.jku.isse.oclx.OclxPackage
 * @generated
 */
public class OclxAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static OclxPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OclxAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = OclxPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OclxSwitch<Adapter> modelSwitch =
    new OclxSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseConstraint(Constraint object)
      {
        return createConstraintAdapter();
      }
      @Override
      public Adapter caseContext(Context object)
      {
        return createContextAdapter();
      }
      @Override
      public Adapter caseExp(Exp object)
      {
        return createExpAdapter();
      }
      @Override
      public Adapter caseBinaryOperator(BinaryOperator object)
      {
        return createBinaryOperatorAdapter();
      }
      @Override
      public Adapter caseBooleanOperator(BooleanOperator object)
      {
        return createBooleanOperatorAdapter();
      }
      @Override
      public Adapter caseMathOperator(MathOperator object)
      {
        return createMathOperatorAdapter();
      }
      @Override
      public Adapter caseNavigationOperator(NavigationOperator object)
      {
        return createNavigationOperatorAdapter();
      }
      @Override
      public Adapter caseUnaryOperator(UnaryOperator object)
      {
        return createUnaryOperatorAdapter();
      }
      @Override
      public Adapter caseNestedExp(NestedExp object)
      {
        return createNestedExpAdapter();
      }
      @Override
      public Adapter caseSelfExp(SelfExp object)
      {
        return createSelfExpAdapter();
      }
      @Override
      public Adapter caseVarDeclaration(VarDeclaration object)
      {
        return createVarDeclarationAdapter();
      }
      @Override
      public Adapter caseVarReference(VarReference object)
      {
        return createVarReferenceAdapter();
      }
      @Override
      public Adapter casePrimitiveLiteralExp(PrimitiveLiteralExp object)
      {
        return createPrimitiveLiteralExpAdapter();
      }
      @Override
      public Adapter caseNumberLiteralExp(NumberLiteralExp object)
      {
        return createNumberLiteralExpAdapter();
      }
      @Override
      public Adapter caseStringLiteralExp(StringLiteralExp object)
      {
        return createStringLiteralExpAdapter();
      }
      @Override
      public Adapter caseBooleanLiteralExp(BooleanLiteralExp object)
      {
        return createBooleanLiteralExpAdapter();
      }
      @Override
      public Adapter caseNullLiteralExp(NullLiteralExp object)
      {
        return createNullLiteralExpAdapter();
      }
      @Override
      public Adapter caseMethodExp(MethodExp object)
      {
        return createMethodExpAdapter();
      }
      @Override
      public Adapter caseIteratorExp(IteratorExp object)
      {
        return createIteratorExpAdapter();
      }
      @Override
      public Adapter caseIteratorName(IteratorName object)
      {
        return createIteratorNameAdapter();
      }
      @Override
      public Adapter caseIteratorVarDeclaration(IteratorVarDeclaration object)
      {
        return createIteratorVarDeclarationAdapter();
      }
      @Override
      public Adapter casePropertyAccessExp(PropertyAccessExp object)
      {
        return createPropertyAccessExpAdapter();
      }
      @Override
      public Adapter caseMethodCallExp(MethodCallExp object)
      {
        return createMethodCallExpAdapter();
      }
      @Override
      public Adapter caseTypeCallExp(TypeCallExp object)
      {
        return createTypeCallExpAdapter();
      }
      @Override
      public Adapter caseTypeExp(TypeExp object)
      {
        return createTypeExpAdapter();
      }
      @Override
      public Adapter caseCollectionTypeIdentifier(CollectionTypeIdentifier object)
      {
        return createCollectionTypeIdentifierAdapter();
      }
      @Override
      public Adapter caseTemporalExp(TemporalExp object)
      {
        return createTemporalExpAdapter();
      }
      @Override
      public Adapter caseUnaryTemporalExp(UnaryTemporalExp object)
      {
        return createUnaryTemporalExpAdapter();
      }
      @Override
      public Adapter caseTriggeredTemporalExp(TriggeredTemporalExp object)
      {
        return createTriggeredTemporalExpAdapter();
      }
      @Override
      public Adapter caseArgumentsExp(ArgumentsExp object)
      {
        return createArgumentsExpAdapter();
      }
      @Override
      public Adapter caseInfixExp(InfixExp object)
      {
        return createInfixExpAdapter();
      }
      @Override
      public Adapter casePrefixExp(PrefixExp object)
      {
        return createPrefixExpAdapter();
      }
      @Override
      public Adapter caseNullLiteralExpCS(NullLiteralExpCS object)
      {
        return createNullLiteralExpCSAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link at.jku.isse.oclx.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see at.jku.isse.oclx.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link at.jku.isse.oclx.Constraint <em>Constraint</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see at.jku.isse.oclx.Constraint
   * @generated
   */
  public Adapter createConstraintAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link at.jku.isse.oclx.Context <em>Context</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see at.jku.isse.oclx.Context
   * @generated
   */
  public Adapter createContextAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link at.jku.isse.oclx.Exp <em>Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see at.jku.isse.oclx.Exp
   * @generated
   */
  public Adapter createExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link at.jku.isse.oclx.BinaryOperator <em>Binary Operator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see at.jku.isse.oclx.BinaryOperator
   * @generated
   */
  public Adapter createBinaryOperatorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link at.jku.isse.oclx.BooleanOperator <em>Boolean Operator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see at.jku.isse.oclx.BooleanOperator
   * @generated
   */
  public Adapter createBooleanOperatorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link at.jku.isse.oclx.MathOperator <em>Math Operator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see at.jku.isse.oclx.MathOperator
   * @generated
   */
  public Adapter createMathOperatorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link at.jku.isse.oclx.NavigationOperator <em>Navigation Operator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see at.jku.isse.oclx.NavigationOperator
   * @generated
   */
  public Adapter createNavigationOperatorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link at.jku.isse.oclx.UnaryOperator <em>Unary Operator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see at.jku.isse.oclx.UnaryOperator
   * @generated
   */
  public Adapter createUnaryOperatorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link at.jku.isse.oclx.NestedExp <em>Nested Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see at.jku.isse.oclx.NestedExp
   * @generated
   */
  public Adapter createNestedExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link at.jku.isse.oclx.SelfExp <em>Self Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see at.jku.isse.oclx.SelfExp
   * @generated
   */
  public Adapter createSelfExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link at.jku.isse.oclx.VarDeclaration <em>Var Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see at.jku.isse.oclx.VarDeclaration
   * @generated
   */
  public Adapter createVarDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link at.jku.isse.oclx.VarReference <em>Var Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see at.jku.isse.oclx.VarReference
   * @generated
   */
  public Adapter createVarReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link at.jku.isse.oclx.PrimitiveLiteralExp <em>Primitive Literal Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see at.jku.isse.oclx.PrimitiveLiteralExp
   * @generated
   */
  public Adapter createPrimitiveLiteralExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link at.jku.isse.oclx.NumberLiteralExp <em>Number Literal Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see at.jku.isse.oclx.NumberLiteralExp
   * @generated
   */
  public Adapter createNumberLiteralExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link at.jku.isse.oclx.StringLiteralExp <em>String Literal Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see at.jku.isse.oclx.StringLiteralExp
   * @generated
   */
  public Adapter createStringLiteralExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link at.jku.isse.oclx.BooleanLiteralExp <em>Boolean Literal Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see at.jku.isse.oclx.BooleanLiteralExp
   * @generated
   */
  public Adapter createBooleanLiteralExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link at.jku.isse.oclx.NullLiteralExp <em>Null Literal Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see at.jku.isse.oclx.NullLiteralExp
   * @generated
   */
  public Adapter createNullLiteralExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link at.jku.isse.oclx.MethodExp <em>Method Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see at.jku.isse.oclx.MethodExp
   * @generated
   */
  public Adapter createMethodExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link at.jku.isse.oclx.IteratorExp <em>Iterator Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see at.jku.isse.oclx.IteratorExp
   * @generated
   */
  public Adapter createIteratorExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link at.jku.isse.oclx.IteratorName <em>Iterator Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see at.jku.isse.oclx.IteratorName
   * @generated
   */
  public Adapter createIteratorNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link at.jku.isse.oclx.IteratorVarDeclaration <em>Iterator Var Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see at.jku.isse.oclx.IteratorVarDeclaration
   * @generated
   */
  public Adapter createIteratorVarDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link at.jku.isse.oclx.PropertyAccessExp <em>Property Access Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see at.jku.isse.oclx.PropertyAccessExp
   * @generated
   */
  public Adapter createPropertyAccessExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link at.jku.isse.oclx.MethodCallExp <em>Method Call Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see at.jku.isse.oclx.MethodCallExp
   * @generated
   */
  public Adapter createMethodCallExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link at.jku.isse.oclx.TypeCallExp <em>Type Call Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see at.jku.isse.oclx.TypeCallExp
   * @generated
   */
  public Adapter createTypeCallExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link at.jku.isse.oclx.TypeExp <em>Type Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see at.jku.isse.oclx.TypeExp
   * @generated
   */
  public Adapter createTypeExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link at.jku.isse.oclx.CollectionTypeIdentifier <em>Collection Type Identifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see at.jku.isse.oclx.CollectionTypeIdentifier
   * @generated
   */
  public Adapter createCollectionTypeIdentifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link at.jku.isse.oclx.TemporalExp <em>Temporal Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see at.jku.isse.oclx.TemporalExp
   * @generated
   */
  public Adapter createTemporalExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link at.jku.isse.oclx.UnaryTemporalExp <em>Unary Temporal Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see at.jku.isse.oclx.UnaryTemporalExp
   * @generated
   */
  public Adapter createUnaryTemporalExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link at.jku.isse.oclx.TriggeredTemporalExp <em>Triggered Temporal Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see at.jku.isse.oclx.TriggeredTemporalExp
   * @generated
   */
  public Adapter createTriggeredTemporalExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link at.jku.isse.oclx.ArgumentsExp <em>Arguments Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see at.jku.isse.oclx.ArgumentsExp
   * @generated
   */
  public Adapter createArgumentsExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link at.jku.isse.oclx.InfixExp <em>Infix Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see at.jku.isse.oclx.InfixExp
   * @generated
   */
  public Adapter createInfixExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link at.jku.isse.oclx.PrefixExp <em>Prefix Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see at.jku.isse.oclx.PrefixExp
   * @generated
   */
  public Adapter createPrefixExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link at.jku.isse.oclx.NullLiteralExpCS <em>Null Literal Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see at.jku.isse.oclx.NullLiteralExpCS
   * @generated
   */
  public Adapter createNullLiteralExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //OclxAdapterFactory
