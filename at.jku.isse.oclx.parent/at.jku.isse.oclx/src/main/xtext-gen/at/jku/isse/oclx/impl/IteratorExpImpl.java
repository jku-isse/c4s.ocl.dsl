/**
 * generated by Xtext 2.34.0
 */
package at.jku.isse.oclx.impl;

import at.jku.isse.oclx.Exp;
import at.jku.isse.oclx.IteratorExp;
import at.jku.isse.oclx.IteratorName;
import at.jku.isse.oclx.IteratorVarDeclaration;
import at.jku.isse.oclx.OclxPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Iterator Exp</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link at.jku.isse.oclx.impl.IteratorExpImpl#getName <em>Name</em>}</li>
 *   <li>{@link at.jku.isse.oclx.impl.IteratorExpImpl#getItervar <em>Itervar</em>}</li>
 *   <li>{@link at.jku.isse.oclx.impl.IteratorExpImpl#getBody <em>Body</em>}</li>
 * </ul>
 *
 * @generated
 */
public class IteratorExpImpl extends MethodExpImpl implements IteratorExp
{
  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected IteratorName name;

  /**
   * The cached value of the '{@link #getItervar() <em>Itervar</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getItervar()
   * @generated
   * @ordered
   */
  protected IteratorVarDeclaration itervar;

  /**
   * The cached value of the '{@link #getBody() <em>Body</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBody()
   * @generated
   * @ordered
   */
  protected Exp body;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IteratorExpImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return OclxPackage.Literals.ITERATOR_EXP;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IteratorName getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetName(IteratorName newName, NotificationChain msgs)
  {
    IteratorName oldName = name;
    name = newName;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OclxPackage.ITERATOR_EXP__NAME, oldName, newName);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(IteratorName newName)
  {
    if (newName != name)
    {
      NotificationChain msgs = null;
      if (name != null)
        msgs = ((InternalEObject)name).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OclxPackage.ITERATOR_EXP__NAME, null, msgs);
      if (newName != null)
        msgs = ((InternalEObject)newName).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OclxPackage.ITERATOR_EXP__NAME, null, msgs);
      msgs = basicSetName(newName, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OclxPackage.ITERATOR_EXP__NAME, newName, newName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IteratorVarDeclaration getItervar()
  {
    return itervar;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetItervar(IteratorVarDeclaration newItervar, NotificationChain msgs)
  {
    IteratorVarDeclaration oldItervar = itervar;
    itervar = newItervar;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OclxPackage.ITERATOR_EXP__ITERVAR, oldItervar, newItervar);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setItervar(IteratorVarDeclaration newItervar)
  {
    if (newItervar != itervar)
    {
      NotificationChain msgs = null;
      if (itervar != null)
        msgs = ((InternalEObject)itervar).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OclxPackage.ITERATOR_EXP__ITERVAR, null, msgs);
      if (newItervar != null)
        msgs = ((InternalEObject)newItervar).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OclxPackage.ITERATOR_EXP__ITERVAR, null, msgs);
      msgs = basicSetItervar(newItervar, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OclxPackage.ITERATOR_EXP__ITERVAR, newItervar, newItervar));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Exp getBody()
  {
    return body;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBody(Exp newBody, NotificationChain msgs)
  {
    Exp oldBody = body;
    body = newBody;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OclxPackage.ITERATOR_EXP__BODY, oldBody, newBody);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBody(Exp newBody)
  {
    if (newBody != body)
    {
      NotificationChain msgs = null;
      if (body != null)
        msgs = ((InternalEObject)body).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OclxPackage.ITERATOR_EXP__BODY, null, msgs);
      if (newBody != null)
        msgs = ((InternalEObject)newBody).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OclxPackage.ITERATOR_EXP__BODY, null, msgs);
      msgs = basicSetBody(newBody, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OclxPackage.ITERATOR_EXP__BODY, newBody, newBody));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case OclxPackage.ITERATOR_EXP__NAME:
        return basicSetName(null, msgs);
      case OclxPackage.ITERATOR_EXP__ITERVAR:
        return basicSetItervar(null, msgs);
      case OclxPackage.ITERATOR_EXP__BODY:
        return basicSetBody(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case OclxPackage.ITERATOR_EXP__NAME:
        return getName();
      case OclxPackage.ITERATOR_EXP__ITERVAR:
        return getItervar();
      case OclxPackage.ITERATOR_EXP__BODY:
        return getBody();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case OclxPackage.ITERATOR_EXP__NAME:
        setName((IteratorName)newValue);
        return;
      case OclxPackage.ITERATOR_EXP__ITERVAR:
        setItervar((IteratorVarDeclaration)newValue);
        return;
      case OclxPackage.ITERATOR_EXP__BODY:
        setBody((Exp)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case OclxPackage.ITERATOR_EXP__NAME:
        setName((IteratorName)null);
        return;
      case OclxPackage.ITERATOR_EXP__ITERVAR:
        setItervar((IteratorVarDeclaration)null);
        return;
      case OclxPackage.ITERATOR_EXP__BODY:
        setBody((Exp)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case OclxPackage.ITERATOR_EXP__NAME:
        return name != null;
      case OclxPackage.ITERATOR_EXP__ITERVAR:
        return itervar != null;
      case OclxPackage.ITERATOR_EXP__BODY:
        return body != null;
    }
    return super.eIsSet(featureID);
  }

} //IteratorExpImpl
