/**
 * generated by Xtext 2.34.0
 */
package at.jku.isse.oclx.util;

import at.jku.isse.oclx.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see at.jku.isse.oclx.OclxPackage
 * @generated
 */
public class OclxSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static OclxPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OclxSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = OclxPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case OclxPackage.MODEL:
      {
        Model model = (Model)theEObject;
        T result = caseModel(model);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclxPackage.CONSTRAINT:
      {
        Constraint constraint = (Constraint)theEObject;
        T result = caseConstraint(constraint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclxPackage.CONTEXT:
      {
        Context context = (Context)theEObject;
        T result = caseContext(context);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclxPackage.EXP:
      {
        Exp exp = (Exp)theEObject;
        T result = caseExp(exp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclxPackage.BINARY_OPERATOR:
      {
        BinaryOperator binaryOperator = (BinaryOperator)theEObject;
        T result = caseBinaryOperator(binaryOperator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclxPackage.BOOLEAN_OPERATOR:
      {
        BooleanOperator booleanOperator = (BooleanOperator)theEObject;
        T result = caseBooleanOperator(booleanOperator);
        if (result == null) result = caseBinaryOperator(booleanOperator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclxPackage.MATH_OPERATOR:
      {
        MathOperator mathOperator = (MathOperator)theEObject;
        T result = caseMathOperator(mathOperator);
        if (result == null) result = caseBinaryOperator(mathOperator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclxPackage.NAVIGATION_OPERATOR:
      {
        NavigationOperator navigationOperator = (NavigationOperator)theEObject;
        T result = caseNavigationOperator(navigationOperator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclxPackage.UNARY_OPERATOR:
      {
        UnaryOperator unaryOperator = (UnaryOperator)theEObject;
        T result = caseUnaryOperator(unaryOperator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclxPackage.NESTED_EXP:
      {
        NestedExp nestedExp = (NestedExp)theEObject;
        T result = caseNestedExp(nestedExp);
        if (result == null) result = caseExp(nestedExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclxPackage.SELF_EXP:
      {
        SelfExp selfExp = (SelfExp)theEObject;
        T result = caseSelfExp(selfExp);
        if (result == null) result = caseExp(selfExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclxPackage.VAR_DECLARATION:
      {
        VarDeclaration varDeclaration = (VarDeclaration)theEObject;
        T result = caseVarDeclaration(varDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclxPackage.VAR_REFERENCE:
      {
        VarReference varReference = (VarReference)theEObject;
        T result = caseVarReference(varReference);
        if (result == null) result = caseExp(varReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclxPackage.PRIMITIVE_LITERAL_EXP:
      {
        PrimitiveLiteralExp primitiveLiteralExp = (PrimitiveLiteralExp)theEObject;
        T result = casePrimitiveLiteralExp(primitiveLiteralExp);
        if (result == null) result = caseExp(primitiveLiteralExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclxPackage.INT_LITERAL_EXP:
      {
        IntLiteralExp intLiteralExp = (IntLiteralExp)theEObject;
        T result = caseIntLiteralExp(intLiteralExp);
        if (result == null) result = casePrimitiveLiteralExp(intLiteralExp);
        if (result == null) result = caseExp(intLiteralExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclxPackage.STRING_LITERAL_EXP:
      {
        StringLiteralExp stringLiteralExp = (StringLiteralExp)theEObject;
        T result = caseStringLiteralExp(stringLiteralExp);
        if (result == null) result = casePrimitiveLiteralExp(stringLiteralExp);
        if (result == null) result = caseExp(stringLiteralExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclxPackage.BOOLEAN_LITERAL_EXP:
      {
        BooleanLiteralExp booleanLiteralExp = (BooleanLiteralExp)theEObject;
        T result = caseBooleanLiteralExp(booleanLiteralExp);
        if (result == null) result = casePrimitiveLiteralExp(booleanLiteralExp);
        if (result == null) result = caseExp(booleanLiteralExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclxPackage.FLOAT_LITERAL_EXP:
      {
        FloatLiteralExp floatLiteralExp = (FloatLiteralExp)theEObject;
        T result = caseFloatLiteralExp(floatLiteralExp);
        if (result == null) result = casePrimitiveLiteralExp(floatLiteralExp);
        if (result == null) result = caseExp(floatLiteralExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclxPackage.METHOD_EXP:
      {
        MethodExp methodExp = (MethodExp)theEObject;
        T result = caseMethodExp(methodExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclxPackage.ITERATOR_EXP:
      {
        IteratorExp iteratorExp = (IteratorExp)theEObject;
        T result = caseIteratorExp(iteratorExp);
        if (result == null) result = caseMethodExp(iteratorExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclxPackage.ITERATOR_NAME:
      {
        IteratorName iteratorName = (IteratorName)theEObject;
        T result = caseIteratorName(iteratorName);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclxPackage.ITERATOR_VAR_DECLARATION:
      {
        IteratorVarDeclaration iteratorVarDeclaration = (IteratorVarDeclaration)theEObject;
        T result = caseIteratorVarDeclaration(iteratorVarDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclxPackage.PROPERTY_ACCESS_EXP:
      {
        PropertyAccessExp propertyAccessExp = (PropertyAccessExp)theEObject;
        T result = casePropertyAccessExp(propertyAccessExp);
        if (result == null) result = caseMethodExp(propertyAccessExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclxPackage.METHOD_CALL_EXP:
      {
        MethodCallExp methodCallExp = (MethodCallExp)theEObject;
        T result = caseMethodCallExp(methodCallExp);
        if (result == null) result = caseMethodExp(methodCallExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclxPackage.TYPE_CALL_EXP:
      {
        TypeCallExp typeCallExp = (TypeCallExp)theEObject;
        T result = caseTypeCallExp(typeCallExp);
        if (result == null) result = caseMethodExp(typeCallExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclxPackage.TYPE_EXP:
      {
        TypeExp typeExp = (TypeExp)theEObject;
        T result = caseTypeExp(typeExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclxPackage.COLLECTION_TYPE_IDENTIFIER:
      {
        CollectionTypeIdentifier collectionTypeIdentifier = (CollectionTypeIdentifier)theEObject;
        T result = caseCollectionTypeIdentifier(collectionTypeIdentifier);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclxPackage.TEMPORAL_EXP:
      {
        TemporalExp temporalExp = (TemporalExp)theEObject;
        T result = caseTemporalExp(temporalExp);
        if (result == null) result = caseExp(temporalExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclxPackage.UNARY_TEMPORAL_EXP:
      {
        UnaryTemporalExp unaryTemporalExp = (UnaryTemporalExp)theEObject;
        T result = caseUnaryTemporalExp(unaryTemporalExp);
        if (result == null) result = caseTemporalExp(unaryTemporalExp);
        if (result == null) result = caseExp(unaryTemporalExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclxPackage.TRIGGERED_TEMPORAL_EXP:
      {
        TriggeredTemporalExp triggeredTemporalExp = (TriggeredTemporalExp)theEObject;
        T result = caseTriggeredTemporalExp(triggeredTemporalExp);
        if (result == null) result = caseTemporalExp(triggeredTemporalExp);
        if (result == null) result = caseExp(triggeredTemporalExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclxPackage.ARGUMENTS_EXP:
      {
        ArgumentsExp argumentsExp = (ArgumentsExp)theEObject;
        T result = caseArgumentsExp(argumentsExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclxPackage.INFIX_EXP:
      {
        InfixExp infixExp = (InfixExp)theEObject;
        T result = caseInfixExp(infixExp);
        if (result == null) result = caseExp(infixExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclxPackage.PREFIX_EXP:
      {
        PrefixExp prefixExp = (PrefixExp)theEObject;
        T result = casePrefixExp(prefixExp);
        if (result == null) result = caseExp(prefixExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModel(Model object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Constraint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Constraint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConstraint(Constraint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Context</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Context</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseContext(Context object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExp(Exp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Binary Operator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Binary Operator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBinaryOperator(BinaryOperator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean Operator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean Operator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleanOperator(BooleanOperator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Math Operator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Math Operator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMathOperator(MathOperator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Navigation Operator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Navigation Operator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNavigationOperator(NavigationOperator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Unary Operator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Unary Operator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnaryOperator(UnaryOperator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Nested Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Nested Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNestedExp(NestedExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Self Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Self Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSelfExp(SelfExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarDeclaration(VarDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarReference(VarReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Primitive Literal Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Primitive Literal Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrimitiveLiteralExp(PrimitiveLiteralExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Int Literal Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Int Literal Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIntLiteralExp(IntLiteralExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String Literal Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String Literal Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringLiteralExp(StringLiteralExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean Literal Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean Literal Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleanLiteralExp(BooleanLiteralExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Float Literal Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Float Literal Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFloatLiteralExp(FloatLiteralExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Method Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Method Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMethodExp(MethodExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Iterator Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Iterator Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIteratorExp(IteratorExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Iterator Name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Iterator Name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIteratorName(IteratorName object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Iterator Var Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Iterator Var Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIteratorVarDeclaration(IteratorVarDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Property Access Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Property Access Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePropertyAccessExp(PropertyAccessExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Method Call Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Method Call Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMethodCallExp(MethodCallExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Call Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Call Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeCallExp(TypeCallExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeExp(TypeExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Collection Type Identifier</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Collection Type Identifier</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCollectionTypeIdentifier(CollectionTypeIdentifier object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Temporal Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Temporal Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTemporalExp(TemporalExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Unary Temporal Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Unary Temporal Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnaryTemporalExp(UnaryTemporalExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Triggered Temporal Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Triggered Temporal Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTriggeredTemporalExp(TriggeredTemporalExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Arguments Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Arguments Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArgumentsExp(ArgumentsExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Infix Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Infix Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInfixExp(InfixExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Prefix Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Prefix Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrefixExp(PrefixExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //OclxSwitch
