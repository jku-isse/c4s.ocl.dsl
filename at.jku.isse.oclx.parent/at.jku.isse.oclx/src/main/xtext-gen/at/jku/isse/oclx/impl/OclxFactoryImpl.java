/**
 * generated by Xtext 2.34.0
 */
package at.jku.isse.oclx.impl;

import at.jku.isse.oclx.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class OclxFactoryImpl extends EFactoryImpl implements OclxFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static OclxFactory init()
  {
    try
    {
      OclxFactory theOclxFactory = (OclxFactory)EPackage.Registry.INSTANCE.getEFactory(OclxPackage.eNS_URI);
      if (theOclxFactory != null)
      {
        return theOclxFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new OclxFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OclxFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case OclxPackage.MODEL: return createModel();
      case OclxPackage.CONSTRAINT: return createConstraint();
      case OclxPackage.CONTEXT: return createContext();
      case OclxPackage.EXP: return createExp();
      case OclxPackage.BINARY_OPERATOR: return createBinaryOperator();
      case OclxPackage.BOOLEAN_OPERATOR: return createBooleanOperator();
      case OclxPackage.MATH_OPERATOR: return createMathOperator();
      case OclxPackage.NAVIGATION_OPERATOR: return createNavigationOperator();
      case OclxPackage.UNARY_OPERATOR: return createUnaryOperator();
      case OclxPackage.NESTED_EXP: return createNestedExp();
      case OclxPackage.NAVIGATION_EXP: return createNavigationExp();
      case OclxPackage.SELF_EXP: return createSelfExp();
      case OclxPackage.VAR_DECLARATION: return createVarDeclaration();
      case OclxPackage.VAR_REFERENCE: return createVarReference();
      case OclxPackage.PRIMITIVE_LITERAL_EXP: return createPrimitiveLiteralExp();
      case OclxPackage.INT_LITERAL_EXP: return createIntLiteralExp();
      case OclxPackage.STRING_LITERAL_EXP: return createStringLiteralExp();
      case OclxPackage.BOOLEAN_LITERAL_EXP: return createBooleanLiteralExp();
      case OclxPackage.FLOAT_LITERAL_EXP: return createFloatLiteralExp();
      case OclxPackage.METHOD_EXP: return createMethodExp();
      case OclxPackage.ITERATOR_EXP: return createIteratorExp();
      case OclxPackage.ITERATOR_NAME: return createIteratorName();
      case OclxPackage.ITERATOR_VAR_DECLARATION: return createIteratorVarDeclaration();
      case OclxPackage.PROPERTY_ACCESS_EXP: return createPropertyAccessExp();
      case OclxPackage.METHOD_CALL_EXP: return createMethodCallExp();
      case OclxPackage.TYPE_CALL_EXP: return createTypeCallExp();
      case OclxPackage.TYPE_EXP: return createTypeExp();
      case OclxPackage.COLLECTION_TYPE_IDENTIFIER: return createCollectionTypeIdentifier();
      case OclxPackage.TEMPORAL_EXP: return createTemporalExp();
      case OclxPackage.UNARY_TEMPORAL_EXP: return createUnaryTemporalExp();
      case OclxPackage.TRIGGERED_TEMPORAL_EXP: return createTriggeredTemporalExp();
      case OclxPackage.ARGUMENTS_EXP: return createArgumentsExp();
      case OclxPackage.INFIX_EXP: return createInfixExp();
      case OclxPackage.PREFIX_EXP: return createPrefixExp();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Constraint createConstraint()
  {
    ConstraintImpl constraint = new ConstraintImpl();
    return constraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Context createContext()
  {
    ContextImpl context = new ContextImpl();
    return context;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Exp createExp()
  {
    ExpImpl exp = new ExpImpl();
    return exp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BinaryOperator createBinaryOperator()
  {
    BinaryOperatorImpl binaryOperator = new BinaryOperatorImpl();
    return binaryOperator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BooleanOperator createBooleanOperator()
  {
    BooleanOperatorImpl booleanOperator = new BooleanOperatorImpl();
    return booleanOperator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MathOperator createMathOperator()
  {
    MathOperatorImpl mathOperator = new MathOperatorImpl();
    return mathOperator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NavigationOperator createNavigationOperator()
  {
    NavigationOperatorImpl navigationOperator = new NavigationOperatorImpl();
    return navigationOperator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UnaryOperator createUnaryOperator()
  {
    UnaryOperatorImpl unaryOperator = new UnaryOperatorImpl();
    return unaryOperator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NestedExp createNestedExp()
  {
    NestedExpImpl nestedExp = new NestedExpImpl();
    return nestedExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NavigationExp createNavigationExp()
  {
    NavigationExpImpl navigationExp = new NavigationExpImpl();
    return navigationExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SelfExp createSelfExp()
  {
    SelfExpImpl selfExp = new SelfExpImpl();
    return selfExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarDeclaration createVarDeclaration()
  {
    VarDeclarationImpl varDeclaration = new VarDeclarationImpl();
    return varDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarReference createVarReference()
  {
    VarReferenceImpl varReference = new VarReferenceImpl();
    return varReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PrimitiveLiteralExp createPrimitiveLiteralExp()
  {
    PrimitiveLiteralExpImpl primitiveLiteralExp = new PrimitiveLiteralExpImpl();
    return primitiveLiteralExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntLiteralExp createIntLiteralExp()
  {
    IntLiteralExpImpl intLiteralExp = new IntLiteralExpImpl();
    return intLiteralExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringLiteralExp createStringLiteralExp()
  {
    StringLiteralExpImpl stringLiteralExp = new StringLiteralExpImpl();
    return stringLiteralExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BooleanLiteralExp createBooleanLiteralExp()
  {
    BooleanLiteralExpImpl booleanLiteralExp = new BooleanLiteralExpImpl();
    return booleanLiteralExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FloatLiteralExp createFloatLiteralExp()
  {
    FloatLiteralExpImpl floatLiteralExp = new FloatLiteralExpImpl();
    return floatLiteralExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MethodExp createMethodExp()
  {
    MethodExpImpl methodExp = new MethodExpImpl();
    return methodExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IteratorExp createIteratorExp()
  {
    IteratorExpImpl iteratorExp = new IteratorExpImpl();
    return iteratorExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IteratorName createIteratorName()
  {
    IteratorNameImpl iteratorName = new IteratorNameImpl();
    return iteratorName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IteratorVarDeclaration createIteratorVarDeclaration()
  {
    IteratorVarDeclarationImpl iteratorVarDeclaration = new IteratorVarDeclarationImpl();
    return iteratorVarDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PropertyAccessExp createPropertyAccessExp()
  {
    PropertyAccessExpImpl propertyAccessExp = new PropertyAccessExpImpl();
    return propertyAccessExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MethodCallExp createMethodCallExp()
  {
    MethodCallExpImpl methodCallExp = new MethodCallExpImpl();
    return methodCallExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TypeCallExp createTypeCallExp()
  {
    TypeCallExpImpl typeCallExp = new TypeCallExpImpl();
    return typeCallExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TypeExp createTypeExp()
  {
    TypeExpImpl typeExp = new TypeExpImpl();
    return typeExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CollectionTypeIdentifier createCollectionTypeIdentifier()
  {
    CollectionTypeIdentifierImpl collectionTypeIdentifier = new CollectionTypeIdentifierImpl();
    return collectionTypeIdentifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TemporalExp createTemporalExp()
  {
    TemporalExpImpl temporalExp = new TemporalExpImpl();
    return temporalExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UnaryTemporalExp createUnaryTemporalExp()
  {
    UnaryTemporalExpImpl unaryTemporalExp = new UnaryTemporalExpImpl();
    return unaryTemporalExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TriggeredTemporalExp createTriggeredTemporalExp()
  {
    TriggeredTemporalExpImpl triggeredTemporalExp = new TriggeredTemporalExpImpl();
    return triggeredTemporalExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArgumentsExp createArgumentsExp()
  {
    ArgumentsExpImpl argumentsExp = new ArgumentsExpImpl();
    return argumentsExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InfixExp createInfixExp()
  {
    InfixExpImpl infixExp = new InfixExpImpl();
    return infixExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PrefixExp createPrefixExp()
  {
    PrefixExpImpl prefixExp = new PrefixExpImpl();
    return prefixExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OclxPackage getOclxPackage()
  {
    return (OclxPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static OclxPackage getPackage()
  {
    return OclxPackage.eINSTANCE;
  }

} //OclxFactoryImpl
