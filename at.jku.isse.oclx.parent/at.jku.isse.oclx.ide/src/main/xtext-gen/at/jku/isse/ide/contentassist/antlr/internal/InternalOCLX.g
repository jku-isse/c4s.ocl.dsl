/*
 * generated by Xtext 2.34.0
 */
grammar InternalOCLX;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package at.jku.isse.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package at.jku.isse.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import at.jku.isse.services.OCLXGrammarAccess;

}
@parser::members {
	private OCLXGrammarAccess grammarAccess;

	public void setGrammarAccess(OCLXGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getConstraintsAssignment()); }
		(rule__Model__ConstraintsAssignment)*
		{ after(grammarAccess.getModelAccess().getConstraintsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstraint
entryRuleConstraint
:
{ before(grammarAccess.getConstraintRule()); }
	 ruleConstraint
{ after(grammarAccess.getConstraintRule()); } 
	 EOF 
;

// Rule Constraint
ruleConstraint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstraintAccess().getGroup()); }
		(rule__Constraint__Group__0)
		{ after(grammarAccess.getConstraintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
		(rule__QualifiedName__Group__0)
		{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSimpleName
entryRuleSimpleName
:
{ before(grammarAccess.getSimpleNameRule()); }
	 ruleSimpleName
{ after(grammarAccess.getSimpleNameRule()); } 
	 EOF 
;

// Rule SimpleName
ruleSimpleName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSimpleNameAccess().getIDTerminalRuleCall()); }
		RULE_ID
		{ after(grammarAccess.getSimpleNameAccess().getIDTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFloat
entryRuleFloat
:
{ before(grammarAccess.getFloatRule()); }
	 ruleFloat
{ after(grammarAccess.getFloatRule()); } 
	 EOF 
;

// Rule Float
ruleFloat 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFloatAccess().getGroup()); }
		(rule__Float__Group__0)
		{ after(grammarAccess.getFloatAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleContext
entryRuleContext
:
{ before(grammarAccess.getContextRule()); }
	 ruleContext
{ after(grammarAccess.getContextRule()); } 
	 EOF 
;

// Rule Context
ruleContext 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getContextAccess().getNameAssignment()); }
		(rule__Context__NameAssignment)
		{ after(grammarAccess.getContextAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExp
entryRuleExp
:
{ before(grammarAccess.getExpRule()); }
	 ruleExp
{ after(grammarAccess.getExpRule()); } 
	 EOF 
;

// Rule Exp
ruleExp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpAccess().getGroup()); }
		(rule__Exp__Group__0)
		{ after(grammarAccess.getExpAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrefixedExp
entryRulePrefixedExp
:
{ before(grammarAccess.getPrefixedExpRule()); }
	 rulePrefixedExp
{ after(grammarAccess.getPrefixedExpRule()); } 
	 EOF 
;

// Rule PrefixedExp
rulePrefixedExp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrefixedExpAccess().getAlternatives()); }
		(rule__PrefixedExp__Alternatives)
		{ after(grammarAccess.getPrefixedExpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBinaryOperator
entryRuleBinaryOperator
:
{ before(grammarAccess.getBinaryOperatorRule()); }
	 ruleBinaryOperator
{ after(grammarAccess.getBinaryOperatorRule()); } 
	 EOF 
;

// Rule BinaryOperator
ruleBinaryOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBinaryOperatorAccess().getInfixOperatorParserRuleCall()); }
		ruleInfixOperator
		{ after(grammarAccess.getBinaryOperatorAccess().getInfixOperatorParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInfixOperator
entryRuleInfixOperator
:
{ before(grammarAccess.getInfixOperatorRule()); }
	 ruleInfixOperator
{ after(grammarAccess.getInfixOperatorRule()); } 
	 EOF 
;

// Rule InfixOperator
ruleInfixOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInfixOperatorAccess().getAlternatives()); }
		(rule__InfixOperator__Alternatives)
		{ after(grammarAccess.getInfixOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBooleanOperator
entryRuleBooleanOperator
:
{ before(grammarAccess.getBooleanOperatorRule()); }
	 ruleBooleanOperator
{ after(grammarAccess.getBooleanOperatorRule()); } 
	 EOF 
;

// Rule BooleanOperator
ruleBooleanOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanOperatorAccess().getOpAssignment()); }
		(rule__BooleanOperator__OpAssignment)
		{ after(grammarAccess.getBooleanOperatorAccess().getOpAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMathOperator
entryRuleMathOperator
:
{ before(grammarAccess.getMathOperatorRule()); }
	 ruleMathOperator
{ after(grammarAccess.getMathOperatorRule()); } 
	 EOF 
;

// Rule MathOperator
ruleMathOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMathOperatorAccess().getOpAssignment()); }
		(rule__MathOperator__OpAssignment)
		{ after(grammarAccess.getMathOperatorAccess().getOpAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNavigationOperator
entryRuleNavigationOperator
:
{ before(grammarAccess.getNavigationOperatorRule()); }
	 ruleNavigationOperator
{ after(grammarAccess.getNavigationOperatorRule()); } 
	 EOF 
;

// Rule NavigationOperator
ruleNavigationOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNavigationOperatorAccess().getNameAssignment()); }
		(rule__NavigationOperator__NameAssignment)
		{ after(grammarAccess.getNavigationOperatorAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnaryOperator
entryRuleUnaryOperator
:
{ before(grammarAccess.getUnaryOperatorRule()); }
	 ruleUnaryOperator
{ after(grammarAccess.getUnaryOperatorRule()); } 
	 EOF 
;

// Rule UnaryOperator
ruleUnaryOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnaryOperatorAccess().getNameAssignment()); }
		(rule__UnaryOperator__NameAssignment)
		{ after(grammarAccess.getUnaryOperatorAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimaryExp
entryRulePrimaryExp
:
{ before(grammarAccess.getPrimaryExpRule()); }
	 rulePrimaryExp
{ after(grammarAccess.getPrimaryExpRule()); } 
	 EOF 
;

// Rule PrimaryExp
rulePrimaryExp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryExpAccess().getAlternatives()); }
		(rule__PrimaryExp__Alternatives)
		{ after(grammarAccess.getPrimaryExpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNestedExp
entryRuleNestedExp
:
{ before(grammarAccess.getNestedExpRule()); }
	 ruleNestedExp
{ after(grammarAccess.getNestedExpRule()); } 
	 EOF 
;

// Rule NestedExp
ruleNestedExp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNestedExpAccess().getGroup()); }
		(rule__NestedExp__Group__0)
		{ after(grammarAccess.getNestedExpAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVarOrSelfExp
entryRuleVarOrSelfExp
:
{ before(grammarAccess.getVarOrSelfExpRule()); }
	 ruleVarOrSelfExp
{ after(grammarAccess.getVarOrSelfExpRule()); } 
	 EOF 
;

// Rule VarOrSelfExp
ruleVarOrSelfExp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarOrSelfExpAccess().getAlternatives()); }
		(rule__VarOrSelfExp__Alternatives)
		{ after(grammarAccess.getVarOrSelfExpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSelfExp
entryRuleSelfExp
:
{ before(grammarAccess.getSelfExpRule()); }
	 ruleSelfExp
{ after(grammarAccess.getSelfExpRule()); } 
	 EOF 
;

// Rule SelfExp
ruleSelfExp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSelfExpAccess().getGroup()); }
		(rule__SelfExp__Group__0)
		{ after(grammarAccess.getSelfExpAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVarDeclaration
entryRuleVarDeclaration
:
{ before(grammarAccess.getVarDeclarationRule()); }
	 ruleVarDeclaration
{ after(grammarAccess.getVarDeclarationRule()); } 
	 EOF 
;

// Rule VarDeclaration
ruleVarDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarDeclarationAccess().getNameAssignment()); }
		(rule__VarDeclaration__NameAssignment)
		{ after(grammarAccess.getVarDeclarationAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVarReference
entryRuleVarReference
:
{ before(grammarAccess.getVarReferenceRule()); }
	 ruleVarReference
{ after(grammarAccess.getVarReferenceRule()); } 
	 EOF 
;

// Rule VarReference
ruleVarReference 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarReferenceAccess().getRefAssignment()); }
		(rule__VarReference__RefAssignment)
		{ after(grammarAccess.getVarReferenceAccess().getRefAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimitiveLiteralExp
entryRulePrimitiveLiteralExp
:
{ before(grammarAccess.getPrimitiveLiteralExpRule()); }
	 rulePrimitiveLiteralExp
{ after(grammarAccess.getPrimitiveLiteralExpRule()); } 
	 EOF 
;

// Rule PrimitiveLiteralExp
rulePrimitiveLiteralExp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimitiveLiteralExpAccess().getAlternatives()); }
		(rule__PrimitiveLiteralExp__Alternatives)
		{ after(grammarAccess.getPrimitiveLiteralExpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntLiteralExp
entryRuleIntLiteralExp
:
{ before(grammarAccess.getIntLiteralExpRule()); }
	 ruleIntLiteralExp
{ after(grammarAccess.getIntLiteralExpRule()); } 
	 EOF 
;

// Rule IntLiteralExp
ruleIntLiteralExp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntLiteralExpAccess().getValueAssignment()); }
		(rule__IntLiteralExp__ValueAssignment)
		{ after(grammarAccess.getIntLiteralExpAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringLiteralExp
entryRuleStringLiteralExp
:
{ before(grammarAccess.getStringLiteralExpRule()); }
	 ruleStringLiteralExp
{ after(grammarAccess.getStringLiteralExpRule()); } 
	 EOF 
;

// Rule StringLiteralExp
ruleStringLiteralExp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringLiteralExpAccess().getValueAssignment()); }
		(rule__StringLiteralExp__ValueAssignment)
		{ after(grammarAccess.getStringLiteralExpAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBooleanLiteralExp
entryRuleBooleanLiteralExp
:
{ before(grammarAccess.getBooleanLiteralExpRule()); }
	 ruleBooleanLiteralExp
{ after(grammarAccess.getBooleanLiteralExpRule()); } 
	 EOF 
;

// Rule BooleanLiteralExp
ruleBooleanLiteralExp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanLiteralExpAccess().getAlternatives()); }
		(rule__BooleanLiteralExp__Alternatives)
		{ after(grammarAccess.getBooleanLiteralExpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFloatLiteralExp
entryRuleFloatLiteralExp
:
{ before(grammarAccess.getFloatLiteralExpRule()); }
	 ruleFloatLiteralExp
{ after(grammarAccess.getFloatLiteralExpRule()); } 
	 EOF 
;

// Rule FloatLiteralExp
ruleFloatLiteralExp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFloatLiteralExpAccess().getValueAssignment()); }
		(rule__FloatLiteralExp__ValueAssignment)
		{ after(grammarAccess.getFloatLiteralExpAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMethodExp
entryRuleMethodExp
:
{ before(grammarAccess.getMethodExpRule()); }
	 ruleMethodExp
{ after(grammarAccess.getMethodExpRule()); } 
	 EOF 
;

// Rule MethodExp
ruleMethodExp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMethodExpAccess().getAlternatives()); }
		(rule__MethodExp__Alternatives)
		{ after(grammarAccess.getMethodExpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCollectionIterator
entryRuleCollectionIterator
:
{ before(grammarAccess.getCollectionIteratorRule()); }
	 ruleCollectionIterator
{ after(grammarAccess.getCollectionIteratorRule()); } 
	 EOF 
;

// Rule CollectionIterator
ruleCollectionIterator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCollectionIteratorAccess().getGroup()); }
		(rule__CollectionIterator__Group__0)
		{ after(grammarAccess.getCollectionIteratorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIteratorName
entryRuleIteratorName
:
{ before(grammarAccess.getIteratorNameRule()); }
	 ruleIteratorName
{ after(grammarAccess.getIteratorNameRule()); } 
	 EOF 
;

// Rule IteratorName
ruleIteratorName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIteratorNameAccess().getNameAssignment()); }
		(rule__IteratorName__NameAssignment)
		{ after(grammarAccess.getIteratorNameAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIteratorVarDeclaration
entryRuleIteratorVarDeclaration
:
{ before(grammarAccess.getIteratorVarDeclarationRule()); }
	 ruleIteratorVarDeclaration
{ after(grammarAccess.getIteratorVarDeclarationRule()); } 
	 EOF 
;

// Rule IteratorVarDeclaration
ruleIteratorVarDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIteratorVarDeclarationAccess().getAlternatives()); }
		(rule__IteratorVarDeclaration__Alternatives)
		{ after(grammarAccess.getIteratorVarDeclarationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePropertyAccess
entryRulePropertyAccess
:
{ before(grammarAccess.getPropertyAccessRule()); }
	 rulePropertyAccess
{ after(grammarAccess.getPropertyAccessRule()); } 
	 EOF 
;

// Rule PropertyAccess
rulePropertyAccess 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPropertyAccessAccess().getNameAssignment()); }
		(rule__PropertyAccess__NameAssignment)
		{ after(grammarAccess.getPropertyAccessAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMethodCall
entryRuleMethodCall
:
{ before(grammarAccess.getMethodCallRule()); }
	 ruleMethodCall
{ after(grammarAccess.getMethodCallRule()); } 
	 EOF 
;

// Rule MethodCall
ruleMethodCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMethodCallAccess().getAlternatives()); }
		(rule__MethodCall__Alternatives)
		{ after(grammarAccess.getMethodCallAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTypeCall
entryRuleTypeCall
:
{ before(grammarAccess.getTypeCallRule()); }
	 ruleTypeCall
{ after(grammarAccess.getTypeCallRule()); } 
	 EOF 
;

// Rule TypeCall
ruleTypeCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeCallAccess().getGroup()); }
		(rule__TypeCall__Group__0)
		{ after(grammarAccess.getTypeCallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTypeExp
entryRuleTypeExp
:
{ before(grammarAccess.getTypeExpRule()); }
	 ruleTypeExp
{ after(grammarAccess.getTypeExpRule()); } 
	 EOF 
;

// Rule TypeExp
ruleTypeExp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeExpAccess().getGroup()); }
		(rule__TypeExp__Group__0)
		{ after(grammarAccess.getTypeExpAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTemporalExp
entryRuleTemporalExp
:
{ before(grammarAccess.getTemporalExpRule()); }
	 ruleTemporalExp
{ after(grammarAccess.getTemporalExpRule()); } 
	 EOF 
;

// Rule TemporalExp
ruleTemporalExp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTemporalExpAccess().getAlternatives()); }
		(rule__TemporalExp__Alternatives)
		{ after(grammarAccess.getTemporalExpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnaryTemporalExp
entryRuleUnaryTemporalExp
:
{ before(grammarAccess.getUnaryTemporalExpRule()); }
	 ruleUnaryTemporalExp
{ after(grammarAccess.getUnaryTemporalExpRule()); } 
	 EOF 
;

// Rule UnaryTemporalExp
ruleUnaryTemporalExp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnaryTemporalExpAccess().getGroup()); }
		(rule__UnaryTemporalExp__Group__0)
		{ after(grammarAccess.getUnaryTemporalExpAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnaryTemporalOp
entryRuleUnaryTemporalOp
:
{ before(grammarAccess.getUnaryTemporalOpRule()); }
	 ruleUnaryTemporalOp
{ after(grammarAccess.getUnaryTemporalOpRule()); } 
	 EOF 
;

// Rule UnaryTemporalOp
ruleUnaryTemporalOp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnaryTemporalOpAccess().getAlternatives()); }
		(rule__UnaryTemporalOp__Alternatives)
		{ after(grammarAccess.getUnaryTemporalOpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTriggeredTemporalExp
entryRuleTriggeredTemporalExp
:
{ before(grammarAccess.getTriggeredTemporalExpRule()); }
	 ruleTriggeredTemporalExp
{ after(grammarAccess.getTriggeredTemporalExpRule()); } 
	 EOF 
;

// Rule TriggeredTemporalExp
ruleTriggeredTemporalExp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTriggeredTemporalExpAccess().getAlternatives()); }
		(rule__TriggeredTemporalExp__Alternatives)
		{ after(grammarAccess.getTriggeredTemporalExpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTemporalAsLongAs
entryRuleTemporalAsLongAs
:
{ before(grammarAccess.getTemporalAsLongAsRule()); }
	 ruleTemporalAsLongAs
{ after(grammarAccess.getTemporalAsLongAsRule()); } 
	 EOF 
;

// Rule TemporalAsLongAs
ruleTemporalAsLongAs 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTemporalAsLongAsAccess().getGroup()); }
		(rule__TemporalAsLongAs__Group__0)
		{ after(grammarAccess.getTemporalAsLongAsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTemporalUntil
entryRuleTemporalUntil
:
{ before(grammarAccess.getTemporalUntilRule()); }
	 ruleTemporalUntil
{ after(grammarAccess.getTemporalUntilRule()); } 
	 EOF 
;

// Rule TemporalUntil
ruleTemporalUntil 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTemporalUntilAccess().getGroup()); }
		(rule__TemporalUntil__Group__0)
		{ after(grammarAccess.getTemporalUntilAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTemporalEverytime
entryRuleTemporalEverytime
:
{ before(grammarAccess.getTemporalEverytimeRule()); }
	 ruleTemporalEverytime
{ after(grammarAccess.getTemporalEverytimeRule()); } 
	 EOF 
;

// Rule TemporalEverytime
ruleTemporalEverytime 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTemporalEverytimeAccess().getGroup()); }
		(rule__TemporalEverytime__Group__0)
		{ after(grammarAccess.getTemporalEverytimeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTemporalAtLeastOnce
entryRuleTemporalAtLeastOnce
:
{ before(grammarAccess.getTemporalAtLeastOnceRule()); }
	 ruleTemporalAtLeastOnce
{ after(grammarAccess.getTemporalAtLeastOnceRule()); } 
	 EOF 
;

// Rule TemporalAtLeastOnce
ruleTemporalAtLeastOnce 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTemporalAtLeastOnceAccess().getGroup()); }
		(rule__TemporalAtLeastOnce__Group__0)
		{ after(grammarAccess.getTemporalAtLeastOnceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLegacyUntil
entryRuleLegacyUntil
:
{ before(grammarAccess.getLegacyUntilRule()); }
	 ruleLegacyUntil
{ after(grammarAccess.getLegacyUntilRule()); } 
	 EOF 
;

// Rule LegacyUntil
ruleLegacyUntil 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLegacyUntilAccess().getGroup()); }
		(rule__LegacyUntil__Group__0)
		{ after(grammarAccess.getLegacyUntilAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLegacyAsSoonAs
entryRuleLegacyAsSoonAs
:
{ before(grammarAccess.getLegacyAsSoonAsRule()); }
	 ruleLegacyAsSoonAs
{ after(grammarAccess.getLegacyAsSoonAsRule()); } 
	 EOF 
;

// Rule LegacyAsSoonAs
ruleLegacyAsSoonAs 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLegacyAsSoonAsAccess().getGroup()); }
		(rule__LegacyAsSoonAs__Group__0)
		{ after(grammarAccess.getLegacyAsSoonAsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLegacyEverytime
entryRuleLegacyEverytime
:
{ before(grammarAccess.getLegacyEverytimeRule()); }
	 ruleLegacyEverytime
{ after(grammarAccess.getLegacyEverytimeRule()); } 
	 EOF 
;

// Rule LegacyEverytime
ruleLegacyEverytime 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLegacyEverytimeAccess().getGroup()); }
		(rule__LegacyEverytime__Group__0)
		{ after(grammarAccess.getLegacyEverytimeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArgumentsExp
entryRuleArgumentsExp
:
{ before(grammarAccess.getArgumentsExpRule()); }
	 ruleArgumentsExp
{ after(grammarAccess.getArgumentsExpRule()); } 
	 EOF 
;

// Rule ArgumentsExp
ruleArgumentsExp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArgumentsExpAccess().getGroup()); }
		(rule__ArgumentsExp__Group__0)
		{ after(grammarAccess.getArgumentsExpAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixedExp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrefixedExpAccess().getGroup_0()); }
		(rule__PrefixedExp__Group_0__0)
		{ after(grammarAccess.getPrefixedExpAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrefixedExpAccess().getPrimaryExpParserRuleCall_1()); }
		rulePrimaryExp
		{ after(grammarAccess.getPrefixedExpAccess().getPrimaryExpParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InfixOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInfixOperatorAccess().getBooleanOperatorParserRuleCall_0()); }
		ruleBooleanOperator
		{ after(grammarAccess.getInfixOperatorAccess().getBooleanOperatorParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getInfixOperatorAccess().getMathOperatorParserRuleCall_1()); }
		ruleMathOperator
		{ after(grammarAccess.getInfixOperatorAccess().getMathOperatorParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanOperator__OpAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanOperatorAccess().getOpGreaterThanSignKeyword_0_0()); }
		'>'
		{ after(grammarAccess.getBooleanOperatorAccess().getOpGreaterThanSignKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanOperatorAccess().getOpLessThanSignKeyword_0_1()); }
		'<'
		{ after(grammarAccess.getBooleanOperatorAccess().getOpLessThanSignKeyword_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanOperatorAccess().getOpGreaterThanSignEqualsSignKeyword_0_2()); }
		'>='
		{ after(grammarAccess.getBooleanOperatorAccess().getOpGreaterThanSignEqualsSignKeyword_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanOperatorAccess().getOpLessThanSignEqualsSignKeyword_0_3()); }
		'<='
		{ after(grammarAccess.getBooleanOperatorAccess().getOpLessThanSignEqualsSignKeyword_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanOperatorAccess().getOpEqualsSignKeyword_0_4()); }
		'='
		{ after(grammarAccess.getBooleanOperatorAccess().getOpEqualsSignKeyword_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanOperatorAccess().getOpExclamationMarkEqualsSignKeyword_0_5()); }
		'!='
		{ after(grammarAccess.getBooleanOperatorAccess().getOpExclamationMarkEqualsSignKeyword_0_5()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanOperatorAccess().getOpAndKeyword_0_6()); }
		'and'
		{ after(grammarAccess.getBooleanOperatorAccess().getOpAndKeyword_0_6()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanOperatorAccess().getOpOrKeyword_0_7()); }
		'or'
		{ after(grammarAccess.getBooleanOperatorAccess().getOpOrKeyword_0_7()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanOperatorAccess().getOpXorKeyword_0_8()); }
		'xor'
		{ after(grammarAccess.getBooleanOperatorAccess().getOpXorKeyword_0_8()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanOperatorAccess().getOpImpliesKeyword_0_9()); }
		'implies'
		{ after(grammarAccess.getBooleanOperatorAccess().getOpImpliesKeyword_0_9()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MathOperator__OpAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMathOperatorAccess().getOpAsteriskKeyword_0_0()); }
		'*'
		{ after(grammarAccess.getMathOperatorAccess().getOpAsteriskKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMathOperatorAccess().getOpSolidusKeyword_0_1()); }
		'/'
		{ after(grammarAccess.getMathOperatorAccess().getOpSolidusKeyword_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getMathOperatorAccess().getOpPlusSignKeyword_0_2()); }
		'+'
		{ after(grammarAccess.getMathOperatorAccess().getOpPlusSignKeyword_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getMathOperatorAccess().getOpHyphenMinusKeyword_0_3()); }
		'-'
		{ after(grammarAccess.getMathOperatorAccess().getOpHyphenMinusKeyword_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NavigationOperator__NameAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNavigationOperatorAccess().getNameFullStopKeyword_0_0()); }
		'.'
		{ after(grammarAccess.getNavigationOperatorAccess().getNameFullStopKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getNavigationOperatorAccess().getNameHyphenMinusGreaterThanSignKeyword_0_1()); }
		'->'
		{ after(grammarAccess.getNavigationOperatorAccess().getNameHyphenMinusGreaterThanSignKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperator__NameAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryOperatorAccess().getNameHyphenMinusKeyword_0_0()); }
		'-'
		{ after(grammarAccess.getUnaryOperatorAccess().getNameHyphenMinusKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryOperatorAccess().getNameNotKeyword_0_1()); }
		'not'
		{ after(grammarAccess.getUnaryOperatorAccess().getNameNotKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExpAccess().getNestedExpParserRuleCall_0()); }
		ruleNestedExp
		{ after(grammarAccess.getPrimaryExpAccess().getNestedExpParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpAccess().getGroup_1()); }
		(rule__PrimaryExp__Group_1__0)
		{ after(grammarAccess.getPrimaryExpAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpAccess().getPrimitiveLiteralExpParserRuleCall_2()); }
		rulePrimitiveLiteralExp
		{ after(grammarAccess.getPrimaryExpAccess().getPrimitiveLiteralExpParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpAccess().getTemporalExpParserRuleCall_3()); }
		ruleTemporalExp
		{ after(grammarAccess.getPrimaryExpAccess().getTemporalExpParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarOrSelfExp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarOrSelfExpAccess().getSelfExpParserRuleCall_0()); }
		ruleSelfExp
		{ after(grammarAccess.getVarOrSelfExpAccess().getSelfExpParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getVarOrSelfExpAccess().getVarReferenceParserRuleCall_1()); }
		ruleVarReference
		{ after(grammarAccess.getVarOrSelfExpAccess().getVarReferenceParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveLiteralExp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimitiveLiteralExpAccess().getIntLiteralExpParserRuleCall_0()); }
		ruleIntLiteralExp
		{ after(grammarAccess.getPrimitiveLiteralExpAccess().getIntLiteralExpParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimitiveLiteralExpAccess().getStringLiteralExpParserRuleCall_1()); }
		ruleStringLiteralExp
		{ after(grammarAccess.getPrimitiveLiteralExpAccess().getStringLiteralExpParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimitiveLiteralExpAccess().getBooleanLiteralExpParserRuleCall_2()); }
		ruleBooleanLiteralExp
		{ after(grammarAccess.getPrimitiveLiteralExpAccess().getBooleanLiteralExpParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getPrimitiveLiteralExpAccess().getFloatLiteralExpParserRuleCall_3()); }
		ruleFloatLiteralExp
		{ after(grammarAccess.getPrimitiveLiteralExpAccess().getFloatLiteralExpParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteralExp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanLiteralExpAccess().getValueAssignment_0()); }
		(rule__BooleanLiteralExp__ValueAssignment_0)
		{ after(grammarAccess.getBooleanLiteralExpAccess().getValueAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanLiteralExpAccess().getValueAssignment_1()); }
		(rule__BooleanLiteralExp__ValueAssignment_1)
		{ after(grammarAccess.getBooleanLiteralExpAccess().getValueAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodExp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodExpAccess().getPropertyAccessParserRuleCall_0()); }
		rulePropertyAccess
		{ after(grammarAccess.getMethodExpAccess().getPropertyAccessParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getMethodExpAccess().getMethodCallParserRuleCall_1()); }
		ruleMethodCall
		{ after(grammarAccess.getMethodExpAccess().getMethodCallParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getMethodExpAccess().getCollectionIteratorParserRuleCall_2()); }
		ruleCollectionIterator
		{ after(grammarAccess.getMethodExpAccess().getCollectionIteratorParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getMethodExpAccess().getTypeCallParserRuleCall_3()); }
		ruleTypeCall
		{ after(grammarAccess.getMethodExpAccess().getTypeCallParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IteratorName__NameAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIteratorNameAccess().getNameForAllKeyword_0_0()); }
		'forAll'
		{ after(grammarAccess.getIteratorNameAccess().getNameForAllKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getIteratorNameAccess().getNameExistsKeyword_0_1()); }
		'exists'
		{ after(grammarAccess.getIteratorNameAccess().getNameExistsKeyword_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getIteratorNameAccess().getNameCollectKeyword_0_2()); }
		'collect'
		{ after(grammarAccess.getIteratorNameAccess().getNameCollectKeyword_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getIteratorNameAccess().getNameRejectKeyword_0_3()); }
		'reject'
		{ after(grammarAccess.getIteratorNameAccess().getNameRejectKeyword_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getIteratorNameAccess().getNameSelectKeyword_0_4()); }
		'select'
		{ after(grammarAccess.getIteratorNameAccess().getNameSelectKeyword_0_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IteratorVarDeclaration__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIteratorVarDeclarationAccess().getNameAssignment_0()); }
		(rule__IteratorVarDeclaration__NameAssignment_0)
		{ after(grammarAccess.getIteratorVarDeclarationAccess().getNameAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getIteratorVarDeclarationAccess().getGroup_1()); }
		(rule__IteratorVarDeclaration__Group_1__0)
		{ after(grammarAccess.getIteratorVarDeclarationAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodCallAccess().getGroup_0()); }
		(rule__MethodCall__Group_0__0)
		{ after(grammarAccess.getMethodCallAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getMethodCallAccess().getGroup_1()); }
		(rule__MethodCall__Group_1__0)
		{ after(grammarAccess.getMethodCallAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeCall__NameAlternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeCallAccess().getNameAsTypeKeyword_0_0_0()); }
		'asType'
		{ after(grammarAccess.getTypeCallAccess().getNameAsTypeKeyword_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypeCallAccess().getNameIsTypeOfKeyword_0_0_1()); }
		'isTypeOf'
		{ after(grammarAccess.getTypeCallAccess().getNameIsTypeOfKeyword_0_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getTypeCallAccess().getNameIsKindOfKeyword_0_0_2()); }
		'isKindOf'
		{ after(grammarAccess.getTypeCallAccess().getNameIsKindOfKeyword_0_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalExp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTemporalExpAccess().getUnaryTemporalExpParserRuleCall_0()); }
		ruleUnaryTemporalExp
		{ after(grammarAccess.getTemporalExpAccess().getUnaryTemporalExpParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTemporalExpAccess().getTriggeredTemporalExpParserRuleCall_1()); }
		ruleTriggeredTemporalExp
		{ after(grammarAccess.getTemporalExpAccess().getTriggeredTemporalExpParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryTemporalOp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryTemporalOpAccess().getNextKeyword_0()); }
		'next'
		{ after(grammarAccess.getUnaryTemporalOpAccess().getNextKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryTemporalOpAccess().getAlwaysKeyword_1()); }
		'always'
		{ after(grammarAccess.getUnaryTemporalOpAccess().getAlwaysKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryTemporalOpAccess().getEventuallyKeyword_2()); }
		'eventually'
		{ after(grammarAccess.getUnaryTemporalOpAccess().getEventuallyKeyword_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TriggeredTemporalExp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTriggeredTemporalExpAccess().getTemporalAsLongAsParserRuleCall_0()); }
		ruleTemporalAsLongAs
		{ after(grammarAccess.getTriggeredTemporalExpAccess().getTemporalAsLongAsParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTriggeredTemporalExpAccess().getTemporalUntilParserRuleCall_1()); }
		ruleTemporalUntil
		{ after(grammarAccess.getTriggeredTemporalExpAccess().getTemporalUntilParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getTriggeredTemporalExpAccess().getTemporalEverytimeParserRuleCall_2()); }
		ruleTemporalEverytime
		{ after(grammarAccess.getTriggeredTemporalExpAccess().getTemporalEverytimeParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getTriggeredTemporalExpAccess().getTemporalAtLeastOnceParserRuleCall_3()); }
		ruleTemporalAtLeastOnce
		{ after(grammarAccess.getTriggeredTemporalExpAccess().getTemporalAtLeastOnceParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getTriggeredTemporalExpAccess().getLegacyUntilParserRuleCall_4()); }
		ruleLegacyUntil
		{ after(grammarAccess.getTriggeredTemporalExpAccess().getLegacyUntilParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getTriggeredTemporalExpAccess().getLegacyAsSoonAsParserRuleCall_5()); }
		ruleLegacyAsSoonAs
		{ after(grammarAccess.getTriggeredTemporalExpAccess().getLegacyAsSoonAsParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getTriggeredTemporalExpAccess().getLegacyEverytimeParserRuleCall_6()); }
		ruleLegacyEverytime
		{ after(grammarAccess.getTriggeredTemporalExpAccess().getLegacyEverytimeParserRuleCall_6()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__0__Impl
	rule__Constraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getRuleKeyword_0()); }
	'rule'
	{ after(grammarAccess.getConstraintAccess().getRuleKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__1__Impl
	rule__Constraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getNameAssignment_1()); }
	(rule__Constraint__NameAssignment_1)
	{ after(grammarAccess.getConstraintAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__2__Impl
	rule__Constraint__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getConstraintAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__3__Impl
	rule__Constraint__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getGroup_3()); }
	(rule__Constraint__Group_3__0)?
	{ after(grammarAccess.getConstraintAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__4__Impl
	rule__Constraint__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getGroup_4()); }
	(rule__Constraint__Group_4__0)?
	{ after(grammarAccess.getConstraintAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__5__Impl
	rule__Constraint__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getContextKeyword_5()); }
	'context:'
	{ after(grammarAccess.getConstraintAccess().getContextKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__6__Impl
	rule__Constraint__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getContextAssignment_6()); }
	(rule__Constraint__ContextAssignment_6)
	{ after(grammarAccess.getConstraintAccess().getContextAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__7__Impl
	rule__Constraint__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getExpressionKeyword_7()); }
	'expression:'
	{ after(grammarAccess.getConstraintAccess().getExpressionKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__8__Impl
	rule__Constraint__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getExpressionAssignment_8()); }
	(rule__Constraint__ExpressionAssignment_8)
	{ after(grammarAccess.getConstraintAccess().getExpressionAssignment_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getRightCurlyBracketKeyword_9()); }
	'}'
	{ after(grammarAccess.getConstraintAccess().getRightCurlyBracketKeyword_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Constraint__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group_3__0__Impl
	rule__Constraint__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getDescriptionKeyword_3_0()); }
	'description:'
	{ after(grammarAccess.getConstraintAccess().getDescriptionKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getDescriptionAssignment_3_1()); }
	(rule__Constraint__DescriptionAssignment_3_1)
	{ after(grammarAccess.getConstraintAccess().getDescriptionAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Constraint__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group_4__0__Impl
	rule__Constraint__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getIsKeyword_4_0()); }
	'is'
	{ after(grammarAccess.getConstraintAccess().getIsKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group_4__1__Impl
	rule__Constraint__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getOverrulableKeyword_4_1()); }
	'overrulable:'
	{ after(grammarAccess.getConstraintAccess().getOverrulableKeyword_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getOverrulableAssignment_4_2()); }
	(rule__Constraint__OverrulableAssignment_4_2)
	{ after(grammarAccess.getConstraintAccess().getOverrulableAssignment_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
	{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
	(rule__QualifiedName__Group_1__0)*
	{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
	{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Float__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Float__Group__0__Impl
	rule__Float__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Float__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFloatAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
	{ after(grammarAccess.getFloatAccess().getINTTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Float__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Float__Group__1__Impl
	rule__Float__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Float__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFloatAccess().getFullStopKeyword_1()); }
	'.'
	{ after(grammarAccess.getFloatAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Float__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Float__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Float__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFloatAccess().getINTTerminalRuleCall_2()); }
	RULE_INT
	{ after(grammarAccess.getFloatAccess().getINTTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Exp__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exp__Group__0__Impl
	rule__Exp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpAccess().getPrefixedExpParserRuleCall_0()); }
	rulePrefixedExp
	{ after(grammarAccess.getExpAccess().getPrefixedExpParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exp__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpAccess().getGroup_1()); }
	(rule__Exp__Group_1__0)?
	{ after(grammarAccess.getExpAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Exp__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exp__Group_1__0__Impl
	rule__Exp__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpAccess().getInfixExpExpressionsAction_1_0()); }
	()
	{ after(grammarAccess.getExpAccess().getInfixExpExpressionsAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exp__Group_1__1__Impl
	rule__Exp__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpAccess().getOperatorsAssignment_1_1()); }
	(rule__Exp__OperatorsAssignment_1_1)
	{ after(grammarAccess.getExpAccess().getOperatorsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exp__Group_1__2__Impl
	rule__Exp__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpAccess().getExpressionsAssignment_1_2()); }
	(rule__Exp__ExpressionsAssignment_1_2)
	{ after(grammarAccess.getExpAccess().getExpressionsAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exp__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpAccess().getGroup_1_3()); }
	(rule__Exp__Group_1_3__0)*
	{ after(grammarAccess.getExpAccess().getGroup_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Exp__Group_1_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exp__Group_1_3__0__Impl
	rule__Exp__Group_1_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group_1_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpAccess().getOperatorsAssignment_1_3_0()); }
	(rule__Exp__OperatorsAssignment_1_3_0)
	{ after(grammarAccess.getExpAccess().getOperatorsAssignment_1_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group_1_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exp__Group_1_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group_1_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpAccess().getExpressionsAssignment_1_3_1()); }
	(rule__Exp__ExpressionsAssignment_1_3_1)
	{ after(grammarAccess.getExpAccess().getExpressionsAssignment_1_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrefixedExp__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrefixedExp__Group_0__0__Impl
	rule__PrefixedExp__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixedExp__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrefixedExpAccess().getPrefixExpAction_0_0()); }
	()
	{ after(grammarAccess.getPrefixedExpAccess().getPrefixExpAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixedExp__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrefixedExp__Group_0__1__Impl
	rule__PrefixedExp__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixedExp__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrefixedExpAccess().getOperatorAssignment_0_1()); }
	(rule__PrefixedExp__OperatorAssignment_0_1)
	{ after(grammarAccess.getPrefixedExpAccess().getOperatorAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixedExp__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrefixedExp__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixedExp__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrefixedExpAccess().getExpressionAssignment_0_2()); }
	(rule__PrefixedExp__ExpressionAssignment_0_2)
	{ after(grammarAccess.getPrefixedExpAccess().getExpressionAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExp__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExp__Group_1__0__Impl
	rule__PrimaryExp__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExp__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpAccess().getVarOrSelfExpParserRuleCall_1_0()); }
	ruleVarOrSelfExp
	{ after(grammarAccess.getPrimaryExpAccess().getVarOrSelfExpParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExp__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExp__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExp__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpAccess().getGroup_1_1()); }
	(rule__PrimaryExp__Group_1_1__0)*
	{ after(grammarAccess.getPrimaryExpAccess().getGroup_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExp__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExp__Group_1_1__0__Impl
	rule__PrimaryExp__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExp__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpAccess().getNavAssignment_1_1_0()); }
	(rule__PrimaryExp__NavAssignment_1_1_0)
	{ after(grammarAccess.getPrimaryExpAccess().getNavAssignment_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExp__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExp__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExp__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpAccess().getMethodsAssignment_1_1_1()); }
	(rule__PrimaryExp__MethodsAssignment_1_1_1)
	{ after(grammarAccess.getPrimaryExpAccess().getMethodsAssignment_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NestedExp__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NestedExp__Group__0__Impl
	rule__NestedExp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NestedExp__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNestedExpAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getNestedExpAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NestedExp__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NestedExp__Group__1__Impl
	rule__NestedExp__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NestedExp__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNestedExpAccess().getSourceAssignment_1()); }
	(rule__NestedExp__SourceAssignment_1)
	{ after(grammarAccess.getNestedExpAccess().getSourceAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NestedExp__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NestedExp__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NestedExp__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNestedExpAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getNestedExpAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SelfExp__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelfExp__Group__0__Impl
	rule__SelfExp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelfExp__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelfExpAccess().getSelfExpAction_0()); }
	()
	{ after(grammarAccess.getSelfExpAccess().getSelfExpAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelfExp__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelfExp__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelfExp__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelfExpAccess().getNameAssignment_1()); }
	(rule__SelfExp__NameAssignment_1)
	{ after(grammarAccess.getSelfExpAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CollectionIterator__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CollectionIterator__Group__0__Impl
	rule__CollectionIterator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionIterator__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollectionIteratorAccess().getNameAssignment_0()); }
	(rule__CollectionIterator__NameAssignment_0)
	{ after(grammarAccess.getCollectionIteratorAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionIterator__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CollectionIterator__Group__1__Impl
	rule__CollectionIterator__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionIterator__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollectionIteratorAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getCollectionIteratorAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionIterator__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CollectionIterator__Group__2__Impl
	rule__CollectionIterator__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionIterator__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollectionIteratorAccess().getItervarAssignment_2()); }
	(rule__CollectionIterator__ItervarAssignment_2)
	{ after(grammarAccess.getCollectionIteratorAccess().getItervarAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionIterator__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CollectionIterator__Group__3__Impl
	rule__CollectionIterator__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionIterator__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollectionIteratorAccess().getVerticalLineKeyword_3()); }
	'|'
	{ after(grammarAccess.getCollectionIteratorAccess().getVerticalLineKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionIterator__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CollectionIterator__Group__4__Impl
	rule__CollectionIterator__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionIterator__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollectionIteratorAccess().getBodyAssignment_4()); }
	(rule__CollectionIterator__BodyAssignment_4)
	{ after(grammarAccess.getCollectionIteratorAccess().getBodyAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionIterator__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CollectionIterator__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionIterator__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollectionIteratorAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getCollectionIteratorAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IteratorVarDeclaration__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IteratorVarDeclaration__Group_1__0__Impl
	rule__IteratorVarDeclaration__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IteratorVarDeclaration__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIteratorVarDeclarationAccess().getNameAssignment_1_0()); }
	(rule__IteratorVarDeclaration__NameAssignment_1_0)
	{ after(grammarAccess.getIteratorVarDeclarationAccess().getNameAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IteratorVarDeclaration__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IteratorVarDeclaration__Group_1__1__Impl
	rule__IteratorVarDeclaration__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IteratorVarDeclaration__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIteratorVarDeclarationAccess().getColonKeyword_1_1()); }
	':'
	{ after(grammarAccess.getIteratorVarDeclarationAccess().getColonKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IteratorVarDeclaration__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IteratorVarDeclaration__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IteratorVarDeclaration__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIteratorVarDeclarationAccess().getTypeAssignment_1_2()); }
	(rule__IteratorVarDeclaration__TypeAssignment_1_2)
	{ after(grammarAccess.getIteratorVarDeclarationAccess().getTypeAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MethodCall__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodCall__Group_0__0__Impl
	rule__MethodCall__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodCallAccess().getNameAssignment_0_0()); }
	(rule__MethodCall__NameAssignment_0_0)
	{ after(grammarAccess.getMethodCallAccess().getNameAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodCall__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodCallAccess().getLeftParenthesisRightParenthesisKeyword_0_1()); }
	'()'
	{ after(grammarAccess.getMethodCallAccess().getLeftParenthesisRightParenthesisKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MethodCall__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodCall__Group_1__0__Impl
	rule__MethodCall__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodCallAccess().getNameAssignment_1_0()); }
	(rule__MethodCall__NameAssignment_1_0)
	{ after(grammarAccess.getMethodCallAccess().getNameAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodCall__Group_1__1__Impl
	rule__MethodCall__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodCallAccess().getLeftParenthesisKeyword_1_1()); }
	'('
	{ after(grammarAccess.getMethodCallAccess().getLeftParenthesisKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodCall__Group_1__2__Impl
	rule__MethodCall__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodCallAccess().getArgsAssignment_1_2()); }
	(rule__MethodCall__ArgsAssignment_1_2)
	{ after(grammarAccess.getMethodCallAccess().getArgsAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodCall__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodCallAccess().getRightParenthesisKeyword_1_3()); }
	')'
	{ after(grammarAccess.getMethodCallAccess().getRightParenthesisKeyword_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeCall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeCall__Group__0__Impl
	rule__TypeCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeCall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeCallAccess().getNameAssignment_0()); }
	(rule__TypeCall__NameAssignment_0)
	{ after(grammarAccess.getTypeCallAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeCall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeCall__Group__1__Impl
	rule__TypeCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeCall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeCallAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getTypeCallAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeCall__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeCall__Group__2__Impl
	rule__TypeCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeCall__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeCallAccess().getTypeAssignment_2()); }
	(rule__TypeCall__TypeAssignment_2)
	{ after(grammarAccess.getTypeCallAccess().getTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeCall__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeCall__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeCall__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeCallAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getTypeCallAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeExp__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeExp__Group__0__Impl
	rule__TypeExp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeExp__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeExpAccess().getTypeExpAction_0()); }
	()
	{ after(grammarAccess.getTypeExpAccess().getTypeExpAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeExp__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeExp__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeExp__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeExpAccess().getNameAssignment_1()); }
	(rule__TypeExp__NameAssignment_1)
	{ after(grammarAccess.getTypeExpAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryTemporalExp__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryTemporalExp__Group__0__Impl
	rule__UnaryTemporalExp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryTemporalExp__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryTemporalExpAccess().getNameAssignment_0()); }
	(rule__UnaryTemporalExp__NameAssignment_0)
	{ after(grammarAccess.getUnaryTemporalExpAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryTemporalExp__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryTemporalExp__Group__1__Impl
	rule__UnaryTemporalExp__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryTemporalExp__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryTemporalExpAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getUnaryTemporalExpAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryTemporalExp__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryTemporalExp__Group__2__Impl
	rule__UnaryTemporalExp__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryTemporalExp__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryTemporalExpAccess().getExpAssignment_2()); }
	(rule__UnaryTemporalExp__ExpAssignment_2)
	{ after(grammarAccess.getUnaryTemporalExpAccess().getExpAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryTemporalExp__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryTemporalExp__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryTemporalExp__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryTemporalExpAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getUnaryTemporalExpAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TemporalAsLongAs__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TemporalAsLongAs__Group__0__Impl
	rule__TemporalAsLongAs__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalAsLongAs__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTemporalAsLongAsAccess().getNameAssignment_0()); }
	(rule__TemporalAsLongAs__NameAssignment_0)
	{ after(grammarAccess.getTemporalAsLongAsAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalAsLongAs__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TemporalAsLongAs__Group__1__Impl
	rule__TemporalAsLongAs__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalAsLongAs__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTemporalAsLongAsAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getTemporalAsLongAsAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalAsLongAs__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TemporalAsLongAs__Group__2__Impl
	rule__TemporalAsLongAs__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalAsLongAs__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTemporalAsLongAsAccess().getBAssignment_2()); }
	(rule__TemporalAsLongAs__BAssignment_2)
	{ after(grammarAccess.getTemporalAsLongAsAccess().getBAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalAsLongAs__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TemporalAsLongAs__Group__3__Impl
	rule__TemporalAsLongAs__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalAsLongAs__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTemporalAsLongAsAccess().getEnsureThatKeyword_3()); }
	'ensureThat'
	{ after(grammarAccess.getTemporalAsLongAsAccess().getEnsureThatKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalAsLongAs__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TemporalAsLongAs__Group__4__Impl
	rule__TemporalAsLongAs__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalAsLongAs__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTemporalAsLongAsAccess().getAAssignment_4()); }
	(rule__TemporalAsLongAs__AAssignment_4)
	{ after(grammarAccess.getTemporalAsLongAsAccess().getAAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalAsLongAs__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TemporalAsLongAs__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalAsLongAs__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTemporalAsLongAsAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getTemporalAsLongAsAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TemporalUntil__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TemporalUntil__Group__0__Impl
	rule__TemporalUntil__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalUntil__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTemporalUntilAccess().getNameAssignment_0()); }
	(rule__TemporalUntil__NameAssignment_0)
	{ after(grammarAccess.getTemporalUntilAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalUntil__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TemporalUntil__Group__1__Impl
	rule__TemporalUntil__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalUntil__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTemporalUntilAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getTemporalUntilAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalUntil__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TemporalUntil__Group__2__Impl
	rule__TemporalUntil__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalUntil__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTemporalUntilAccess().getAAssignment_2()); }
	(rule__TemporalUntil__AAssignment_2)
	{ after(grammarAccess.getTemporalUntilAccess().getAAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalUntil__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TemporalUntil__Group__3__Impl
	rule__TemporalUntil__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalUntil__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTemporalUntilAccess().getAsLongAsKeyword_3()); }
	'asLongAs'
	{ after(grammarAccess.getTemporalUntilAccess().getAsLongAsKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalUntil__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TemporalUntil__Group__4__Impl
	rule__TemporalUntil__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalUntil__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTemporalUntilAccess().getBAssignment_4()); }
	(rule__TemporalUntil__BAssignment_4)
	{ after(grammarAccess.getTemporalUntilAccess().getBAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalUntil__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TemporalUntil__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalUntil__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTemporalUntilAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getTemporalUntilAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TemporalEverytime__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TemporalEverytime__Group__0__Impl
	rule__TemporalEverytime__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalEverytime__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTemporalEverytimeAccess().getNameAssignment_0()); }
	(rule__TemporalEverytime__NameAssignment_0)
	{ after(grammarAccess.getTemporalEverytimeAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalEverytime__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TemporalEverytime__Group__1__Impl
	rule__TemporalEverytime__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalEverytime__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTemporalEverytimeAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getTemporalEverytimeAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalEverytime__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TemporalEverytime__Group__2__Impl
	rule__TemporalEverytime__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalEverytime__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTemporalEverytimeAccess().getAAssignment_2()); }
	(rule__TemporalEverytime__AAssignment_2)
	{ after(grammarAccess.getTemporalEverytimeAccess().getAAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalEverytime__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TemporalEverytime__Group__3__Impl
	rule__TemporalEverytime__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalEverytime__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTemporalEverytimeAccess().getThenKeyword_3()); }
	'then'
	{ after(grammarAccess.getTemporalEverytimeAccess().getThenKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalEverytime__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TemporalEverytime__Group__4__Impl
	rule__TemporalEverytime__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalEverytime__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTemporalEverytimeAccess().getBAssignment_4()); }
	(rule__TemporalEverytime__BAssignment_4)
	{ after(grammarAccess.getTemporalEverytimeAccess().getBAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalEverytime__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TemporalEverytime__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalEverytime__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTemporalEverytimeAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getTemporalEverytimeAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TemporalAtLeastOnce__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TemporalAtLeastOnce__Group__0__Impl
	rule__TemporalAtLeastOnce__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalAtLeastOnce__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTemporalAtLeastOnceAccess().getNameAssignment_0()); }
	(rule__TemporalAtLeastOnce__NameAssignment_0)
	{ after(grammarAccess.getTemporalAtLeastOnceAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalAtLeastOnce__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TemporalAtLeastOnce__Group__1__Impl
	rule__TemporalAtLeastOnce__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalAtLeastOnce__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTemporalAtLeastOnceAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getTemporalAtLeastOnceAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalAtLeastOnce__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TemporalAtLeastOnce__Group__2__Impl
	rule__TemporalAtLeastOnce__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalAtLeastOnce__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTemporalAtLeastOnceAccess().getAAssignment_2()); }
	(rule__TemporalAtLeastOnce__AAssignment_2)
	{ after(grammarAccess.getTemporalAtLeastOnceAccess().getAAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalAtLeastOnce__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TemporalAtLeastOnce__Group__3__Impl
	rule__TemporalAtLeastOnce__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalAtLeastOnce__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTemporalAtLeastOnceAccess().getThenAtLeastOnceKeyword_3()); }
	'thenAtLeastOnce'
	{ after(grammarAccess.getTemporalAtLeastOnceAccess().getThenAtLeastOnceKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalAtLeastOnce__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TemporalAtLeastOnce__Group__4__Impl
	rule__TemporalAtLeastOnce__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalAtLeastOnce__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTemporalAtLeastOnceAccess().getBAssignment_4()); }
	(rule__TemporalAtLeastOnce__BAssignment_4)
	{ after(grammarAccess.getTemporalAtLeastOnceAccess().getBAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalAtLeastOnce__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TemporalAtLeastOnce__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalAtLeastOnce__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTemporalAtLeastOnceAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getTemporalAtLeastOnceAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LegacyUntil__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LegacyUntil__Group__0__Impl
	rule__LegacyUntil__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LegacyUntil__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLegacyUntilAccess().getNameAssignment_0()); }
	(rule__LegacyUntil__NameAssignment_0)
	{ after(grammarAccess.getLegacyUntilAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LegacyUntil__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LegacyUntil__Group__1__Impl
	rule__LegacyUntil__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LegacyUntil__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLegacyUntilAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getLegacyUntilAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LegacyUntil__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LegacyUntil__Group__2__Impl
	rule__LegacyUntil__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LegacyUntil__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLegacyUntilAccess().getAAssignment_2()); }
	(rule__LegacyUntil__AAssignment_2)
	{ after(grammarAccess.getLegacyUntilAccess().getAAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LegacyUntil__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LegacyUntil__Group__3__Impl
	rule__LegacyUntil__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LegacyUntil__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLegacyUntilAccess().getCommaKeyword_3()); }
	','
	{ after(grammarAccess.getLegacyUntilAccess().getCommaKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LegacyUntil__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LegacyUntil__Group__4__Impl
	rule__LegacyUntil__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__LegacyUntil__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLegacyUntilAccess().getBAssignment_4()); }
	(rule__LegacyUntil__BAssignment_4)
	{ after(grammarAccess.getLegacyUntilAccess().getBAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LegacyUntil__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LegacyUntil__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LegacyUntil__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLegacyUntilAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getLegacyUntilAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LegacyAsSoonAs__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LegacyAsSoonAs__Group__0__Impl
	rule__LegacyAsSoonAs__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LegacyAsSoonAs__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLegacyAsSoonAsAccess().getNameAssignment_0()); }
	(rule__LegacyAsSoonAs__NameAssignment_0)
	{ after(grammarAccess.getLegacyAsSoonAsAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LegacyAsSoonAs__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LegacyAsSoonAs__Group__1__Impl
	rule__LegacyAsSoonAs__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LegacyAsSoonAs__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLegacyAsSoonAsAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getLegacyAsSoonAsAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LegacyAsSoonAs__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LegacyAsSoonAs__Group__2__Impl
	rule__LegacyAsSoonAs__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LegacyAsSoonAs__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLegacyAsSoonAsAccess().getAAssignment_2()); }
	(rule__LegacyAsSoonAs__AAssignment_2)
	{ after(grammarAccess.getLegacyAsSoonAsAccess().getAAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LegacyAsSoonAs__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LegacyAsSoonAs__Group__3__Impl
	rule__LegacyAsSoonAs__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LegacyAsSoonAs__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLegacyAsSoonAsAccess().getCommaKeyword_3()); }
	','
	{ after(grammarAccess.getLegacyAsSoonAsAccess().getCommaKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LegacyAsSoonAs__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LegacyAsSoonAs__Group__4__Impl
	rule__LegacyAsSoonAs__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__LegacyAsSoonAs__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLegacyAsSoonAsAccess().getBAssignment_4()); }
	(rule__LegacyAsSoonAs__BAssignment_4)
	{ after(grammarAccess.getLegacyAsSoonAsAccess().getBAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LegacyAsSoonAs__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LegacyAsSoonAs__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LegacyAsSoonAs__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLegacyAsSoonAsAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getLegacyAsSoonAsAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LegacyEverytime__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LegacyEverytime__Group__0__Impl
	rule__LegacyEverytime__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LegacyEverytime__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLegacyEverytimeAccess().getNameAssignment_0()); }
	(rule__LegacyEverytime__NameAssignment_0)
	{ after(grammarAccess.getLegacyEverytimeAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LegacyEverytime__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LegacyEverytime__Group__1__Impl
	rule__LegacyEverytime__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LegacyEverytime__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLegacyEverytimeAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getLegacyEverytimeAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LegacyEverytime__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LegacyEverytime__Group__2__Impl
	rule__LegacyEverytime__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LegacyEverytime__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLegacyEverytimeAccess().getAAssignment_2()); }
	(rule__LegacyEverytime__AAssignment_2)
	{ after(grammarAccess.getLegacyEverytimeAccess().getAAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LegacyEverytime__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LegacyEverytime__Group__3__Impl
	rule__LegacyEverytime__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LegacyEverytime__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLegacyEverytimeAccess().getCommaKeyword_3()); }
	','
	{ after(grammarAccess.getLegacyEverytimeAccess().getCommaKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LegacyEverytime__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LegacyEverytime__Group__4__Impl
	rule__LegacyEverytime__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__LegacyEverytime__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLegacyEverytimeAccess().getBAssignment_4()); }
	(rule__LegacyEverytime__BAssignment_4)
	{ after(grammarAccess.getLegacyEverytimeAccess().getBAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LegacyEverytime__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LegacyEverytime__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LegacyEverytime__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLegacyEverytimeAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getLegacyEverytimeAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArgumentsExp__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArgumentsExp__Group__0__Impl
	rule__ArgumentsExp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentsExp__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArgumentsExpAccess().getOperatorsAssignment_0()); }
	(rule__ArgumentsExp__OperatorsAssignment_0)
	{ after(grammarAccess.getArgumentsExpAccess().getOperatorsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentsExp__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArgumentsExp__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentsExp__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArgumentsExpAccess().getGroup_1()); }
	(rule__ArgumentsExp__Group_1__0)*
	{ after(grammarAccess.getArgumentsExpAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArgumentsExp__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArgumentsExp__Group_1__0__Impl
	rule__ArgumentsExp__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentsExp__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArgumentsExpAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getArgumentsExpAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentsExp__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArgumentsExp__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentsExp__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArgumentsExpAccess().getOperatorsAssignment_1_1()); }
	(rule__ArgumentsExp__OperatorsAssignment_1_1)
	{ after(grammarAccess.getArgumentsExpAccess().getOperatorsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__ConstraintsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getConstraintsConstraintParserRuleCall_0()); }
		ruleConstraint
		{ after(grammarAccess.getModelAccess().getConstraintsConstraintParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getConstraintAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__DescriptionAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintAccess().getDescriptionDESCRIPTIONTerminalRuleCall_3_1_0()); }
		RULE_DESCRIPTION
		{ after(grammarAccess.getConstraintAccess().getDescriptionDESCRIPTIONTerminalRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__OverrulableAssignment_4_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintAccess().getOverrulableBooleanLiteralExpParserRuleCall_4_2_0()); }
		ruleBooleanLiteralExp
		{ after(grammarAccess.getConstraintAccess().getOverrulableBooleanLiteralExpParserRuleCall_4_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__ContextAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintAccess().getContextContextParserRuleCall_6_0()); }
		ruleContext
		{ after(grammarAccess.getConstraintAccess().getContextContextParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__ExpressionAssignment_8
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintAccess().getExpressionExpParserRuleCall_8_0()); }
		ruleExp
		{ after(grammarAccess.getConstraintAccess().getExpressionExpParserRuleCall_8_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Context__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContextAccess().getNameQualifiedNameParserRuleCall_0()); }
		ruleQualifiedName
		{ after(grammarAccess.getContextAccess().getNameQualifiedNameParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__OperatorsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpAccess().getOperatorsBinaryOperatorParserRuleCall_1_1_0()); }
		ruleBinaryOperator
		{ after(grammarAccess.getExpAccess().getOperatorsBinaryOperatorParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__ExpressionsAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpAccess().getExpressionsPrefixedExpParserRuleCall_1_2_0()); }
		rulePrefixedExp
		{ after(grammarAccess.getExpAccess().getExpressionsPrefixedExpParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__OperatorsAssignment_1_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpAccess().getOperatorsBinaryOperatorParserRuleCall_1_3_0_0()); }
		ruleBinaryOperator
		{ after(grammarAccess.getExpAccess().getOperatorsBinaryOperatorParserRuleCall_1_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__ExpressionsAssignment_1_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpAccess().getExpressionsPrefixedExpParserRuleCall_1_3_1_0()); }
		rulePrefixedExp
		{ after(grammarAccess.getExpAccess().getExpressionsPrefixedExpParserRuleCall_1_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixedExp__OperatorAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrefixedExpAccess().getOperatorUnaryOperatorParserRuleCall_0_1_0()); }
		ruleUnaryOperator
		{ after(grammarAccess.getPrefixedExpAccess().getOperatorUnaryOperatorParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixedExp__ExpressionAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrefixedExpAccess().getExpressionPrimaryExpParserRuleCall_0_2_0()); }
		rulePrimaryExp
		{ after(grammarAccess.getPrefixedExpAccess().getExpressionPrimaryExpParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanOperator__OpAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanOperatorAccess().getOpAlternatives_0()); }
		(rule__BooleanOperator__OpAlternatives_0)
		{ after(grammarAccess.getBooleanOperatorAccess().getOpAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MathOperator__OpAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMathOperatorAccess().getOpAlternatives_0()); }
		(rule__MathOperator__OpAlternatives_0)
		{ after(grammarAccess.getMathOperatorAccess().getOpAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NavigationOperator__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNavigationOperatorAccess().getNameAlternatives_0()); }
		(rule__NavigationOperator__NameAlternatives_0)
		{ after(grammarAccess.getNavigationOperatorAccess().getNameAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperator__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryOperatorAccess().getNameAlternatives_0()); }
		(rule__UnaryOperator__NameAlternatives_0)
		{ after(grammarAccess.getUnaryOperatorAccess().getNameAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExp__NavAssignment_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExpAccess().getNavNavigationOperatorParserRuleCall_1_1_0_0()); }
		ruleNavigationOperator
		{ after(grammarAccess.getPrimaryExpAccess().getNavNavigationOperatorParserRuleCall_1_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExp__MethodsAssignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExpAccess().getMethodsMethodExpParserRuleCall_1_1_1_0()); }
		ruleMethodExp
		{ after(grammarAccess.getPrimaryExpAccess().getMethodsMethodExpParserRuleCall_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NestedExp__SourceAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNestedExpAccess().getSourceExpParserRuleCall_1_0()); }
		ruleExp
		{ after(grammarAccess.getNestedExpAccess().getSourceExpParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelfExp__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelfExpAccess().getNameSelfKeyword_1_0()); }
		(
			{ before(grammarAccess.getSelfExpAccess().getNameSelfKeyword_1_0()); }
			'self'
			{ after(grammarAccess.getSelfExpAccess().getNameSelfKeyword_1_0()); }
		)
		{ after(grammarAccess.getSelfExpAccess().getNameSelfKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarDeclarationAccess().getNameSimpleNameParserRuleCall_0()); }
		ruleSimpleName
		{ after(grammarAccess.getVarDeclarationAccess().getNameSimpleNameParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarReference__RefAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarReferenceAccess().getRefVarDeclarationCrossReference_0()); }
		(
			{ before(grammarAccess.getVarReferenceAccess().getRefVarDeclarationIDTerminalRuleCall_0_1()); }
			RULE_ID
			{ after(grammarAccess.getVarReferenceAccess().getRefVarDeclarationIDTerminalRuleCall_0_1()); }
		)
		{ after(grammarAccess.getVarReferenceAccess().getRefVarDeclarationCrossReference_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntLiteralExp__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntLiteralExpAccess().getValueINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getIntLiteralExpAccess().getValueINTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteralExp__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringLiteralExpAccess().getValueSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getStringLiteralExpAccess().getValueSTRINGTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteralExp__ValueAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanLiteralExpAccess().getValueTrueKeyword_0_0()); }
		(
			{ before(grammarAccess.getBooleanLiteralExpAccess().getValueTrueKeyword_0_0()); }
			'true'
			{ after(grammarAccess.getBooleanLiteralExpAccess().getValueTrueKeyword_0_0()); }
		)
		{ after(grammarAccess.getBooleanLiteralExpAccess().getValueTrueKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteralExp__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanLiteralExpAccess().getValueFalseKeyword_1_0()); }
		(
			{ before(grammarAccess.getBooleanLiteralExpAccess().getValueFalseKeyword_1_0()); }
			'false'
			{ after(grammarAccess.getBooleanLiteralExpAccess().getValueFalseKeyword_1_0()); }
		)
		{ after(grammarAccess.getBooleanLiteralExpAccess().getValueFalseKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatLiteralExp__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFloatLiteralExpAccess().getValueFloatParserRuleCall_0()); }
		ruleFloat
		{ after(grammarAccess.getFloatLiteralExpAccess().getValueFloatParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionIterator__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCollectionIteratorAccess().getNameIteratorNameParserRuleCall_0_0()); }
		ruleIteratorName
		{ after(grammarAccess.getCollectionIteratorAccess().getNameIteratorNameParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionIterator__ItervarAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCollectionIteratorAccess().getItervarIteratorVarDeclarationParserRuleCall_2_0()); }
		ruleIteratorVarDeclaration
		{ after(grammarAccess.getCollectionIteratorAccess().getItervarIteratorVarDeclarationParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionIterator__BodyAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCollectionIteratorAccess().getBodyExpParserRuleCall_4_0()); }
		ruleExp
		{ after(grammarAccess.getCollectionIteratorAccess().getBodyExpParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IteratorName__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIteratorNameAccess().getNameAlternatives_0()); }
		(rule__IteratorName__NameAlternatives_0)
		{ after(grammarAccess.getIteratorNameAccess().getNameAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IteratorVarDeclaration__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIteratorVarDeclarationAccess().getNameVarDeclarationParserRuleCall_0_0()); }
		ruleVarDeclaration
		{ after(grammarAccess.getIteratorVarDeclarationAccess().getNameVarDeclarationParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IteratorVarDeclaration__NameAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIteratorVarDeclarationAccess().getNameVarDeclarationParserRuleCall_1_0_0()); }
		ruleVarDeclaration
		{ after(grammarAccess.getIteratorVarDeclarationAccess().getNameVarDeclarationParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IteratorVarDeclaration__TypeAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIteratorVarDeclarationAccess().getTypeTypeExpParserRuleCall_1_2_0()); }
		ruleTypeExp
		{ after(grammarAccess.getIteratorVarDeclarationAccess().getTypeTypeExpParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyAccess__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyAccessAccess().getNameSimpleNameParserRuleCall_0()); }
		ruleSimpleName
		{ after(grammarAccess.getPropertyAccessAccess().getNameSimpleNameParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__NameAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodCallAccess().getNameSimpleNameParserRuleCall_0_0_0()); }
		ruleSimpleName
		{ after(grammarAccess.getMethodCallAccess().getNameSimpleNameParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__NameAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodCallAccess().getNameSimpleNameParserRuleCall_1_0_0()); }
		ruleSimpleName
		{ after(grammarAccess.getMethodCallAccess().getNameSimpleNameParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__ArgsAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodCallAccess().getArgsArgumentsExpParserRuleCall_1_2_0()); }
		ruleArgumentsExp
		{ after(grammarAccess.getMethodCallAccess().getArgsArgumentsExpParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeCall__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeCallAccess().getNameAlternatives_0_0()); }
		(rule__TypeCall__NameAlternatives_0_0)
		{ after(grammarAccess.getTypeCallAccess().getNameAlternatives_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeCall__TypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeCallAccess().getTypeTypeExpParserRuleCall_2_0()); }
		ruleTypeExp
		{ after(grammarAccess.getTypeCallAccess().getTypeTypeExpParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeExp__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeExpAccess().getNameURITerminalRuleCall_1_0()); }
		RULE_URI
		{ after(grammarAccess.getTypeExpAccess().getNameURITerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryTemporalExp__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryTemporalExpAccess().getNameUnaryTemporalOpParserRuleCall_0_0()); }
		ruleUnaryTemporalOp
		{ after(grammarAccess.getUnaryTemporalExpAccess().getNameUnaryTemporalOpParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryTemporalExp__ExpAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryTemporalExpAccess().getExpExpParserRuleCall_2_0()); }
		ruleExp
		{ after(grammarAccess.getUnaryTemporalExpAccess().getExpExpParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalAsLongAs__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTemporalAsLongAsAccess().getNameAsLongAsKeyword_0_0()); }
		(
			{ before(grammarAccess.getTemporalAsLongAsAccess().getNameAsLongAsKeyword_0_0()); }
			'asLongAs'
			{ after(grammarAccess.getTemporalAsLongAsAccess().getNameAsLongAsKeyword_0_0()); }
		)
		{ after(grammarAccess.getTemporalAsLongAsAccess().getNameAsLongAsKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalAsLongAs__BAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTemporalAsLongAsAccess().getBExpParserRuleCall_2_0()); }
		ruleExp
		{ after(grammarAccess.getTemporalAsLongAsAccess().getBExpParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalAsLongAs__AAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTemporalAsLongAsAccess().getAExpParserRuleCall_4_0()); }
		ruleExp
		{ after(grammarAccess.getTemporalAsLongAsAccess().getAExpParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalUntil__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTemporalUntilAccess().getNameEnsureThatKeyword_0_0()); }
		(
			{ before(grammarAccess.getTemporalUntilAccess().getNameEnsureThatKeyword_0_0()); }
			'ensureThat'
			{ after(grammarAccess.getTemporalUntilAccess().getNameEnsureThatKeyword_0_0()); }
		)
		{ after(grammarAccess.getTemporalUntilAccess().getNameEnsureThatKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalUntil__AAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTemporalUntilAccess().getAExpParserRuleCall_2_0()); }
		ruleExp
		{ after(grammarAccess.getTemporalUntilAccess().getAExpParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalUntil__BAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTemporalUntilAccess().getBExpParserRuleCall_4_0()); }
		ruleExp
		{ after(grammarAccess.getTemporalUntilAccess().getBExpParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalEverytime__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTemporalEverytimeAccess().getNameEveryTimeKeyword_0_0()); }
		(
			{ before(grammarAccess.getTemporalEverytimeAccess().getNameEveryTimeKeyword_0_0()); }
			'everyTime'
			{ after(grammarAccess.getTemporalEverytimeAccess().getNameEveryTimeKeyword_0_0()); }
		)
		{ after(grammarAccess.getTemporalEverytimeAccess().getNameEveryTimeKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalEverytime__AAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTemporalEverytimeAccess().getAExpParserRuleCall_2_0()); }
		ruleExp
		{ after(grammarAccess.getTemporalEverytimeAccess().getAExpParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalEverytime__BAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTemporalEverytimeAccess().getBExpParserRuleCall_4_0()); }
		ruleExp
		{ after(grammarAccess.getTemporalEverytimeAccess().getBExpParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalAtLeastOnce__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTemporalAtLeastOnceAccess().getNameWhenOnceKeyword_0_0()); }
		(
			{ before(grammarAccess.getTemporalAtLeastOnceAccess().getNameWhenOnceKeyword_0_0()); }
			'whenOnce'
			{ after(grammarAccess.getTemporalAtLeastOnceAccess().getNameWhenOnceKeyword_0_0()); }
		)
		{ after(grammarAccess.getTemporalAtLeastOnceAccess().getNameWhenOnceKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalAtLeastOnce__AAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTemporalAtLeastOnceAccess().getAExpParserRuleCall_2_0()); }
		ruleExp
		{ after(grammarAccess.getTemporalAtLeastOnceAccess().getAExpParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalAtLeastOnce__BAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTemporalAtLeastOnceAccess().getBExpParserRuleCall_4_0()); }
		ruleExp
		{ after(grammarAccess.getTemporalAtLeastOnceAccess().getBExpParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LegacyUntil__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLegacyUntilAccess().getNameUntilKeyword_0_0()); }
		(
			{ before(grammarAccess.getLegacyUntilAccess().getNameUntilKeyword_0_0()); }
			'until'
			{ after(grammarAccess.getLegacyUntilAccess().getNameUntilKeyword_0_0()); }
		)
		{ after(grammarAccess.getLegacyUntilAccess().getNameUntilKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LegacyUntil__AAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLegacyUntilAccess().getAExpParserRuleCall_2_0()); }
		ruleExp
		{ after(grammarAccess.getLegacyUntilAccess().getAExpParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LegacyUntil__BAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLegacyUntilAccess().getBExpParserRuleCall_4_0()); }
		ruleExp
		{ after(grammarAccess.getLegacyUntilAccess().getBExpParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LegacyAsSoonAs__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLegacyAsSoonAsAccess().getNameAsSoonAsKeyword_0_0()); }
		(
			{ before(grammarAccess.getLegacyAsSoonAsAccess().getNameAsSoonAsKeyword_0_0()); }
			'asSoonAs'
			{ after(grammarAccess.getLegacyAsSoonAsAccess().getNameAsSoonAsKeyword_0_0()); }
		)
		{ after(grammarAccess.getLegacyAsSoonAsAccess().getNameAsSoonAsKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LegacyAsSoonAs__AAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLegacyAsSoonAsAccess().getAExpParserRuleCall_2_0()); }
		ruleExp
		{ after(grammarAccess.getLegacyAsSoonAsAccess().getAExpParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LegacyAsSoonAs__BAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLegacyAsSoonAsAccess().getBExpParserRuleCall_4_0()); }
		ruleExp
		{ after(grammarAccess.getLegacyAsSoonAsAccess().getBExpParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LegacyEverytime__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLegacyEverytimeAccess().getNameEverytimeKeyword_0_0()); }
		(
			{ before(grammarAccess.getLegacyEverytimeAccess().getNameEverytimeKeyword_0_0()); }
			'everytime'
			{ after(grammarAccess.getLegacyEverytimeAccess().getNameEverytimeKeyword_0_0()); }
		)
		{ after(grammarAccess.getLegacyEverytimeAccess().getNameEverytimeKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LegacyEverytime__AAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLegacyEverytimeAccess().getAExpParserRuleCall_2_0()); }
		ruleExp
		{ after(grammarAccess.getLegacyEverytimeAccess().getAExpParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LegacyEverytime__BAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLegacyEverytimeAccess().getBExpParserRuleCall_4_0()); }
		ruleExp
		{ after(grammarAccess.getLegacyEverytimeAccess().getBExpParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentsExp__OperatorsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArgumentsExpAccess().getOperatorsExpParserRuleCall_0_0()); }
		ruleExp
		{ after(grammarAccess.getArgumentsExpAccess().getOperatorsExpParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentsExp__OperatorsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArgumentsExpAccess().getOperatorsExpParserRuleCall_1_1_0()); }
		ruleExp
		{ after(grammarAccess.getArgumentsExpAccess().getOperatorsExpParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_DESCRIPTION : '"' ( options {greedy=false;} : . )*'"';

RULE_URI : '<' ( options {greedy=false;} : . )*'>';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
