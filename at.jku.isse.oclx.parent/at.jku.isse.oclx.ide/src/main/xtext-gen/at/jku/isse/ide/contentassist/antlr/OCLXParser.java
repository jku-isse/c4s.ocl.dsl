/*
 * generated by Xtext 2.34.0
 */
package at.jku.isse.ide.contentassist.antlr;

import at.jku.isse.ide.contentassist.antlr.internal.InternalOCLXParser;
import at.jku.isse.services.OCLXGrammarAccess;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class OCLXParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(OCLXGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, OCLXGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getPrefixedExpAccess().getAlternatives(), "rule__PrefixedExp__Alternatives");
			builder.put(grammarAccess.getInfixOperatorAccess().getAlternatives(), "rule__InfixOperator__Alternatives");
			builder.put(grammarAccess.getBooleanOperatorAccess().getOpAlternatives_0(), "rule__BooleanOperator__OpAlternatives_0");
			builder.put(grammarAccess.getMathOperatorAccess().getOpAlternatives_0(), "rule__MathOperator__OpAlternatives_0");
			builder.put(grammarAccess.getNavigationOperatorAccess().getNameAlternatives_0(), "rule__NavigationOperator__NameAlternatives_0");
			builder.put(grammarAccess.getUnaryOperatorAccess().getNameAlternatives_0(), "rule__UnaryOperator__NameAlternatives_0");
			builder.put(grammarAccess.getPrimaryExpAccess().getAlternatives(), "rule__PrimaryExp__Alternatives");
			builder.put(grammarAccess.getVarOrSelfExpAccess().getAlternatives(), "rule__VarOrSelfExp__Alternatives");
			builder.put(grammarAccess.getPrimitiveLiteralExpAccess().getAlternatives(), "rule__PrimitiveLiteralExp__Alternatives");
			builder.put(grammarAccess.getBooleanLiteralExpAccess().getAlternatives(), "rule__BooleanLiteralExp__Alternatives");
			builder.put(grammarAccess.getMethodExpAccess().getAlternatives(), "rule__MethodExp__Alternatives");
			builder.put(grammarAccess.getIteratorNameAccess().getNameAlternatives_0(), "rule__IteratorName__NameAlternatives_0");
			builder.put(grammarAccess.getIteratorVarDeclarationAccess().getAlternatives(), "rule__IteratorVarDeclaration__Alternatives");
			builder.put(grammarAccess.getMethodCallAccess().getAlternatives(), "rule__MethodCall__Alternatives");
			builder.put(grammarAccess.getTypeExpAccess().getAlternatives(), "rule__TypeExp__Alternatives");
			builder.put(grammarAccess.getCollectionTypeIdentifierAccess().getNameAlternatives_0(), "rule__CollectionTypeIdentifier__NameAlternatives_0");
			builder.put(grammarAccess.getConstraintAccess().getGroup(), "rule__Constraint__Group__0");
			builder.put(grammarAccess.getConstraintAccess().getGroup_3(), "rule__Constraint__Group_3__0");
			builder.put(grammarAccess.getConstraintAccess().getGroup_4(), "rule__Constraint__Group_4__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
			builder.put(grammarAccess.getExpAccess().getGroup(), "rule__Exp__Group__0");
			builder.put(grammarAccess.getExpAccess().getGroup_1(), "rule__Exp__Group_1__0");
			builder.put(grammarAccess.getExpAccess().getGroup_1_3(), "rule__Exp__Group_1_3__0");
			builder.put(grammarAccess.getPrefixedExpAccess().getGroup_0(), "rule__PrefixedExp__Group_0__0");
			builder.put(grammarAccess.getPrimaryExpAccess().getGroup_1(), "rule__PrimaryExp__Group_1__0");
			builder.put(grammarAccess.getPrimaryExpAccess().getGroup_1_1(), "rule__PrimaryExp__Group_1_1__0");
			builder.put(grammarAccess.getNestedExpAccess().getGroup(), "rule__NestedExp__Group__0");
			builder.put(grammarAccess.getSelfExpAccess().getGroup(), "rule__SelfExp__Group__0");
			builder.put(grammarAccess.getNullLiteralExpAccess().getGroup(), "rule__NullLiteralExp__Group__0");
			builder.put(grammarAccess.getCollectionIteratorAccess().getGroup(), "rule__CollectionIterator__Group__0");
			builder.put(grammarAccess.getIteratorVarDeclarationAccess().getGroup_1(), "rule__IteratorVarDeclaration__Group_1__0");
			builder.put(grammarAccess.getMethodCallAccess().getGroup_0(), "rule__MethodCall__Group_0__0");
			builder.put(grammarAccess.getMethodCallAccess().getGroup_1(), "rule__MethodCall__Group_1__0");
			builder.put(grammarAccess.getMethodCallAccess().getGroup_2(), "rule__MethodCall__Group_2__0");
			builder.put(grammarAccess.getTypeExpAccess().getGroup_0(), "rule__TypeExp__Group_0__0");
			builder.put(grammarAccess.getTypeExpAccess().getGroup_1(), "rule__TypeExp__Group_1__0");
			builder.put(grammarAccess.getPathAccess().getGroup(), "rule__Path__Group__0");
			builder.put(grammarAccess.getPathAccess().getGroup_1(), "rule__Path__Group_1__0");
			builder.put(grammarAccess.getArgumentsExpAccess().getGroup(), "rule__ArgumentsExp__Group__0");
			builder.put(grammarAccess.getArgumentsExpAccess().getGroup_1(), "rule__ArgumentsExp__Group_1__0");
			builder.put(grammarAccess.getModelAccess().getConstraintsAssignment(), "rule__Model__ConstraintsAssignment");
			builder.put(grammarAccess.getConstraintAccess().getNameAssignment_1(), "rule__Constraint__NameAssignment_1");
			builder.put(grammarAccess.getConstraintAccess().getDescriptionAssignment_3_1(), "rule__Constraint__DescriptionAssignment_3_1");
			builder.put(grammarAccess.getConstraintAccess().getOverrulableAssignment_4_2(), "rule__Constraint__OverrulableAssignment_4_2");
			builder.put(grammarAccess.getConstraintAccess().getContextAssignment_6(), "rule__Constraint__ContextAssignment_6");
			builder.put(grammarAccess.getConstraintAccess().getExpressionAssignment_8(), "rule__Constraint__ExpressionAssignment_8");
			builder.put(grammarAccess.getContextAccess().getNameAssignment(), "rule__Context__NameAssignment");
			builder.put(grammarAccess.getExpAccess().getOperatorsAssignment_1_1(), "rule__Exp__OperatorsAssignment_1_1");
			builder.put(grammarAccess.getExpAccess().getExpressionsAssignment_1_2(), "rule__Exp__ExpressionsAssignment_1_2");
			builder.put(grammarAccess.getExpAccess().getOperatorsAssignment_1_3_0(), "rule__Exp__OperatorsAssignment_1_3_0");
			builder.put(grammarAccess.getExpAccess().getExpressionsAssignment_1_3_1(), "rule__Exp__ExpressionsAssignment_1_3_1");
			builder.put(grammarAccess.getPrefixedExpAccess().getOperatorsAssignment_0_1(), "rule__PrefixedExp__OperatorsAssignment_0_1");
			builder.put(grammarAccess.getPrefixedExpAccess().getExpressionAssignment_0_2(), "rule__PrefixedExp__ExpressionAssignment_0_2");
			builder.put(grammarAccess.getBooleanOperatorAccess().getOpAssignment(), "rule__BooleanOperator__OpAssignment");
			builder.put(grammarAccess.getMathOperatorAccess().getOpAssignment(), "rule__MathOperator__OpAssignment");
			builder.put(grammarAccess.getNavigationOperatorAccess().getNameAssignment(), "rule__NavigationOperator__NameAssignment");
			builder.put(grammarAccess.getUnaryOperatorAccess().getNameAssignment(), "rule__UnaryOperator__NameAssignment");
			builder.put(grammarAccess.getPrimaryExpAccess().getNavAssignment_1_1_0(), "rule__PrimaryExp__NavAssignment_1_1_0");
			builder.put(grammarAccess.getPrimaryExpAccess().getMethodsAssignment_1_1_1(), "rule__PrimaryExp__MethodsAssignment_1_1_1");
			builder.put(grammarAccess.getNestedExpAccess().getSourceAssignment_1(), "rule__NestedExp__SourceAssignment_1");
			builder.put(grammarAccess.getSelfExpAccess().getNameAssignment_1(), "rule__SelfExp__NameAssignment_1");
			builder.put(grammarAccess.getVarDeclarationAccess().getNameAssignment(), "rule__VarDeclaration__NameAssignment");
			builder.put(grammarAccess.getVarReferenceAccess().getRefAssignment(), "rule__VarReference__RefAssignment");
			builder.put(grammarAccess.getNumberLiteralExpAccess().getValueAssignment(), "rule__NumberLiteralExp__ValueAssignment");
			builder.put(grammarAccess.getStringLiteralExpAccess().getValueAssignment(), "rule__StringLiteralExp__ValueAssignment");
			builder.put(grammarAccess.getBooleanLiteralExpAccess().getValueAssignment_0(), "rule__BooleanLiteralExp__ValueAssignment_0");
			builder.put(grammarAccess.getBooleanLiteralExpAccess().getValueAssignment_1(), "rule__BooleanLiteralExp__ValueAssignment_1");
			builder.put(grammarAccess.getCollectionIteratorAccess().getNameAssignment_0(), "rule__CollectionIterator__NameAssignment_0");
			builder.put(grammarAccess.getCollectionIteratorAccess().getItervarAssignment_2(), "rule__CollectionIterator__ItervarAssignment_2");
			builder.put(grammarAccess.getCollectionIteratorAccess().getBodyAssignment_4(), "rule__CollectionIterator__BodyAssignment_4");
			builder.put(grammarAccess.getIteratorNameAccess().getNameAssignment(), "rule__IteratorName__NameAssignment");
			builder.put(grammarAccess.getIteratorVarDeclarationAccess().getNameAssignment_0(), "rule__IteratorVarDeclaration__NameAssignment_0");
			builder.put(grammarAccess.getIteratorVarDeclarationAccess().getNameAssignment_1_0(), "rule__IteratorVarDeclaration__NameAssignment_1_0");
			builder.put(grammarAccess.getIteratorVarDeclarationAccess().getTypeAssignment_1_2(), "rule__IteratorVarDeclaration__TypeAssignment_1_2");
			builder.put(grammarAccess.getPropertyAccessAccess().getNameAssignment(), "rule__PropertyAccess__NameAssignment");
			builder.put(grammarAccess.getMethodCallAccess().getNameAssignment_0_0(), "rule__MethodCall__NameAssignment_0_0");
			builder.put(grammarAccess.getMethodCallAccess().getNameAssignment_1_0(), "rule__MethodCall__NameAssignment_1_0");
			builder.put(grammarAccess.getMethodCallAccess().getArgsAssignment_1_2(), "rule__MethodCall__ArgsAssignment_1_2");
			builder.put(grammarAccess.getMethodCallAccess().getNameAssignment_2_0(), "rule__MethodCall__NameAssignment_2_0");
			builder.put(grammarAccess.getMethodCallAccess().getTypeAssignment_2_2(), "rule__MethodCall__TypeAssignment_2_2");
			builder.put(grammarAccess.getTypeExpAccess().getNameAssignment_0_2(), "rule__TypeExp__NameAssignment_0_2");
			builder.put(grammarAccess.getTypeExpAccess().getCollectionTypeAssignment_1_0(), "rule__TypeExp__CollectionTypeAssignment_1_0");
			builder.put(grammarAccess.getTypeExpAccess().getTypeAssignment_1_1(), "rule__TypeExp__TypeAssignment_1_1");
			builder.put(grammarAccess.getCollectionTypeIdentifierAccess().getNameAssignment(), "rule__CollectionTypeIdentifier__NameAssignment");
			builder.put(grammarAccess.getArgumentsExpAccess().getOperatorsAssignment_0(), "rule__ArgumentsExp__OperatorsAssignment_0");
			builder.put(grammarAccess.getArgumentsExpAccess().getOperatorsAssignment_1_1(), "rule__ArgumentsExp__OperatorsAssignment_1_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private OCLXGrammarAccess grammarAccess;

	@Override
	protected InternalOCLXParser createParser() {
		InternalOCLXParser result = new InternalOCLXParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public OCLXGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(OCLXGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
